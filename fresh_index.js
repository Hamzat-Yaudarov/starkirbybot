require('dotenv').config();

console.log('üöÄ –ó–∞–ø—É—Å–∫ –ù–û–í–û–ì–û StarKirby Bot...');
console.log('üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:', process.cwd());

const TelegramBot = require('node-telegram-bot-api');
const Database = require('./database');

const BOT_TOKEN = process.env.BOT_TOKEN;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
if (!BOT_TOKEN) {
    console.error('‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    process.exit(1);
}

console.log('‚úÖ –¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞...');

// –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, {
    polling: true
});

// –°–æ–∑–¥–∞—ë–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
const db = new Database();

// –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
function log(message, data = null) {
    const timestamp = new Date().toISOString();
    console.log(`[${timestamp}] BOT: ${message}`, data ? JSON.stringify(data) : '');
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
function generateReferralCode() {
    return Math.random().toString(36).substring(2, 8).toUpperCase();
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function getMainMenu() {
    return {
        inline_keyboard: [
            [
                { text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' },
                { text: 'üëÜ –ö–ª–∏–∫–Ω—É—Ç—å', callback_data: 'daily_click' }
            ],
            [
                { text: 'üìã –ó–∞–¥–∞–Ω–∏—è', callback_data: 'tasks' },
                { text: '‚≠ê –ü–æ–ª—É—á–∏—Ç—å –∑–≤—ë–∑–¥—ã', callback_data: 'referrals' }
            ],
            [
                { text: 'üì¶ –ö–µ–π—Å', callback_data: 'cases' },
                { text: 'üêæ –ü–∏—Ç–æ–º—Ü—ã', callback_data: 'pets' }
            ],
            [
                { text: 'üèÜ –†–µ–π—Ç–∏–Ω–≥–∏', callback_data: 'ratings' },
                { text: 'üé∞ –õ–æ—Ç–µ—Ä–µ–∏', callback_data: 'lotteries' }
            ],
            [
                { text: 'üé´ –ü—Ä–æ–º–æ–∫–æ–¥', callback_data: 'promo' },
                { text: 'üí∞ –í—ã–≤–æ–¥', callback_data: 'withdrawal' }
            ]
        ]
    };
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function registerUser(userId, username, firstName, referralCode = null) {
    try {
        log('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', { userId, username, firstName, referralCode });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
        const existingUser = await db.get('SELECT * FROM users WHERE id = ?', [userId]);
        if (existingUser) {
            log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', { userId });
            return existingUser;
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
        let userReferralCode;
        let isUnique = false;
        while (!isUnique) {
            userReferralCode = generateReferralCode();
            const existing = await db.get('SELECT id FROM users WHERE referral_code = ?', [userReferralCode]);
            if (!existing) {
                isUnique = true;
            }
        }

        // –ò—â–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
        let referrerId = null;
        if (referralCode) {
            const referrer = await db.get('SELECT id FROM users WHERE referral_code = ?', [referralCode]);
            if (referrer) {
                referrerId = referrer.id;
                log('–ù–∞–π–¥–µ–Ω –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π', { referrerId });
            }
        }

        // –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.run(
            'INSERT INTO users (id, username, first_name, balance, referrer_id, referral_code, level1_referrals, level2_referrals, total_earned, last_click_date, cases_opened_today, last_case_date) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
            [userId, username, firstName, 0, referrerId, userReferralCode, 0, 0, 0, null, 0, null]
        );

        log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω', { userId, userReferralCode });

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É
        if (referrerId) {
            await processReferralReward(userId, referrerId);
        }

        return await db.get('SELECT * FROM users WHERE id = ?', [userId]);

    } catch (error) {
        log('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', { error: error.message, userId });
        throw error;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
async function processReferralReward(newUserId, referrerId) {
    try {
        log('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã', { newUserId, referrerId });

        // –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
        await db.run(
            'UPDATE users SET balance = balance + 3, total_earned = total_earned + 3, level1_referrals = level1_referrals + 1 WHERE id = ?',
            [referrerId]
        );

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        await db.run(
            'INSERT INTO transactions (user_id, type, amount, description) VALUES (?, ?, ?, ?)',
            [referrerId, 'referral', 3, `–ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª (ID: ${newUserId})`]
        );

        log('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ ÔøΩÔøΩ—ã–¥–∞–Ω–∞', { referrerId, amount: 3 });

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
        try {
            await bot.sendMessage(referrerId, `üéâ **–ù–û–í–´–ô –†–ï–§–ï–†–ê–õ!**

üë§ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!

üí∞ **–ù–∞–≥—Ä–∞–¥–∞:** +3 ‚≠ê

üî• –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π!`, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }],
                        [{ text: '‚≠ê –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –µ—â—ë', callback_data: 'referrals' }]
                    ]
                }
            });
        } catch (notificationError) {
            log('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', { error: notificationError.message });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞ 2 —É—Ä–æ–≤–Ω—è
        const referrer = await db.get('SELECT referrer_id FROM users WHERE id = ?', [referrerId]);
        if (referrer && referrer.referrer_id) {
            log('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ 2 —É—Ä–æ–≤–Ω—è', { level2ReferrerId: referrer.referrer_id });

            await db.run(
                'UPDATE users SET balance = balance + 0.05, total_earned = total_earned + 0.05, level2_referrals = level2_referrals + 1 WHERE id = ?',
                [referrer.referrer_id]
            );

            await db.run(
                'INSERT INTO transactions (user_id, type, amount, description) VALUES (?, ?, ?, ?)',
                [referrer.referrer_id, 'referral', 0.05, `–†–µ—Ñ–µ—Ä–∞–ª 2 —É—Ä–æ–≤–Ω—è (ID: ${newUserId})`]
            );

            // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞ 2 —É—Ä–æ–≤–Ω—è
            try {
                await bot.sendMessage(referrer.referrer_id, `üéâ **–†–ï–§–ï–†–ê–õ 2 –£–†–û–í–ù–Ø!**

üë• –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –øÔøΩÔøΩ–∏–≤—ë–ª –¥—Ä—É–≥–∞!

üí∞ **–ù–∞–≥—Ä–∞–¥–∞:** +0.05 ‚≠ê

üî• –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π!`, {
                    parse_mode: 'Markdown'
                });
            } catch (notificationError) {
                log('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è 2 —É—Ä–æ–≤–Ω—è', { error: notificationError.message });
            }
        }

    } catch (error) {
        log('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã', { error: error.message, newUserId, referrerId });
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
async function showProfile(chatId, userId, messageId = null) {
    try {
        log('–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è', { userId });

        const user = await db.get('SELECT * FROM users WHERE id = ?', [userId]);
        if (!user) {
            await bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const profileMessage = `üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**

üí∞ **–ë–∞–ª–∞–Ω—Å:** ${user.balance.toFixed(2)} ‚≠ê
üíé **–û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫:** ${user.total_earned.toFixed(2)} ‚≠ê

üë• **–†–µ—Ñ–µ—Ä–∞–ª—ã:**
‚îú –£—Ä–æ–≤–µ–Ω—å 1: ${user.level1_referrals} —á–µ–ª–æ–≤–µ–∫
‚îî –£—Ä–æ–≤–µ–Ω—å 2: ${user.level2_referrals} —á–µ–ª–æ–≤–µ–∫

üîó **–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:**
\`https://t.me/kirbystarsfarmbot?start=${user.referral_code}\`

üí° –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏!`;

        const options = {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üëÜ –ö–ª–∏–∫–Ω—É—Ç—å', callback_data: 'daily_click' }],
                    [{ text: '‚≠ê –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', callback_data: 'referrals' }],
                    [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                ]
            }
        };

        if (messageId) {
            try {
                await bot.editMessageText(profileMessage, {
                    chat_id: chatId,
                    message_id: messageId,
                    ...options
                });
            } catch (editError) {
                await bot.sendMessage(chatId, profileMessage, options);
            }
        } else {
            await bot.sendMessage(chatId, profileMessage, options);
        }

    } catch (error) {
        log('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è', { error: error.message, userId });
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è');
    }
}

// –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–ª–∏–∫
async function dailyClick(chatId, userId, messageId = null) {
    try {
        log('–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–ª–∏–∫', { userId });

        const user = await db.get('SELECT * FROM users WHERE id = ?', [userId]);
        if (!user) {
            await bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const today = new Date().toISOString().split('T')[0];
        if (user.last_click_date === today) {
            log('–£–∂–µ –∫–ª–∏–∫–∞–ª —Å–µ–≥–æ–¥–Ω—è', { userId });
            await bot.sendMessage(chatId, '‚è∞ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –∫–ª–∏–∫ —Å–µ–≥–æ–¥–Ω—è! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞.');
            return;
        }

        const reward = 0.1;

        // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
        await db.run(
            'UPDATE users SET balance = balance + ?, total_earned = total_earned + ?, last_click_date = ? WHERE id = ?',
            [reward, reward, today, userId]
        );

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        await db.run(
            'INSERT INTO transactions (user_id, type, amount, description) VALUES (?, ?, ?, ?)',
            [userId, 'click', reward, '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–ª–∏–∫']
        );

        log('–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∫–ª–∏–∫ –Ω–∞—á–∏—Å–ª–µ–Ω–∞', { userId, reward });

        const successMessage = `üéâ **–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞!**

üí∞ **–ü–æ–ª—É—á–µ–Ω–æ:** +${reward} ‚≠ê

‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∫–ª–∏–∫ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∑–∞–≤—Ç—Ä–∞!
üöÄ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞!`;

        const options = {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }],
                    [{ text: '‚≠ê –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', callback_data: 'referrals' }],
                    [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                ]
            }
        };

        if (messageId) {
            try {
                await bot.editMessageText(successMessage, {
                    chat_id: chatId,
                    message_id: messageId,
                    ...options
                });
            } catch (editError) {
                await bot.sendMessage(chatId, successMessage, options);
            }
        } else {
            await bot.sendMessage(chatId, successMessage, options);
        }

    } catch (error) {
        log('–û—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∫–ª–∏–∫–∞', { error: error.message, userId });
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã');
    }
}

// –üÔøΩÔøΩ–∫–∞–∑–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
async function showReferrals(chatId, userId, messageId = null) {
    try {
        log('–ü–æ–∫–∞–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', { userId });

        const user = await db.get('SELECT * FROM users WHERE id = ?', [userId]);
        if (!user) {
            await bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const referralMessage = `‚≠ê **–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π!**

üéØ **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
‚Ä¢ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞: **+3 ‚≠ê**
‚Ä¢ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ –≤–∞—à–∏—Ö –¥—Ä—É–∑–µ–π: **+0.05 ‚≠ê**

üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—ÅÔøΩÔøΩ–∏–∫–∞:**
üë• –†–µ—Ñ–µ—Ä–∞–ª—ã 1 —É—Ä–æ–≤–Ω—è: ${user.level1_referrals}
üë• –†–µ—Ñ–µ—Ä–∞–ª—ã 2 —É—Ä–æ–≤–Ω—è: ${user.level2_referrals}
üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${user.balance.toFixed(2)} ‚≠ê

üîó **–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:**
https://t.me/kirbystarsfarmbot?start=${user.referral_code}

üì≤ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º!`;

        const options = {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π', switch_inline_query: `üåü –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ Kirby Stars Farm!\n\nüéÅ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –ø–æ –º–æ–µ–π —Å—Å—ã–ª–∫–µ: https://t.me/kirbystarsfarmbot?start=${user.referral_code}` }],
                    [{ text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }],
                    [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                ]
            }
        };

        if (messageId) {
            try {
                await bot.editMessageText(referralMessage, {
                    chat_id: chatId,
                    message_id: messageId,
                    ...options
                });
            } catch (editError) {
                await bot.sendMessage(chatId, referralMessage, options);
            }
        } else {
            await bot.sendMessage(chatId, referralMessage, options);
        }

    } catch (error) {
        log('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', { error: error.message, userId });
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø—Ä–æ–º–æ–∫–æ–¥—ã)
bot.on('message', async (msg) => {
    if (msg.text && !msg.text.startsWith('/')) {
        const chatId = msg.chat.id;
        const userId = msg.from.id;
        const text = msg.text.trim();

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥ (3+ —Å–∏–º–≤–æ–ª–∞, –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã)
            if (text.length >= 3 && /^[A-Za-z0-9]+$/.test(text)) {
                log('–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞', { userId, code: text });
                await usePromoCode(chatId, userId, text);
            } else {
                // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                await bot.sendMessage(chatId, 'ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:', {
                    reply_markup: getMainMenu()
                });
            }
        } catch (error) {
            log('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', { error: error.message, userId, text });
            await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
        }
    }
});

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start(?:\s+(.+))?/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const username = msg.from.username;
    const firstName = msg.from.first_name;
    const referralCode = match[1];

    try {
        log('–ö–æ–º–∞–Ω–¥–∞ /start', { userId, username, firstName, referralCode });

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await registerUser(userId, username, firstName, referralCode);

        const welcomeMessage = `üåü **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Kirby Stars Farm!**

üëã –ü—Ä–∏–≤–µ—Ç, ${firstName}!

üí´ **–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ Telegram Stars**

üéØ **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞:**
‚Ä¢ üëÜ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–ª–∏–∫–∏ ‚Äî 0.1 ‚≠ê –≤ –¥–µ–Ω—å
‚Ä¢ üìã –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π ‚Äî –±—ã—Å—Ç—Ä—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
‚Ä¢ üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ ‚Äî 3 ‚≠ê –∑–∞ –¥—Ä—É–≥–∞
‚Ä¢ üì¶ –ö–µ–π—Å—ã ‚Äî —Å–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–∏–∑—ã
‚Ä¢ üêæ –ü–∏—Ç–æ–º—Ü—ã ‚Äî —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤

üöÄ –ù–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!`;

        await bot.sendMessage(chatId, welcomeMessage, {
            parse_mode: 'Markdown',
            reply_markup: getMainMenu()
        });

    } catch (error) {
        log('–û—à–∏–±–∫–∞ –≤ /start', { error: error.message, userId });
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥ÔøΩÔøΩ—Å—Ç—Ä–∞—Ü–∏–∏');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–æ–≤
bot.on('callback_query', async (callbackQuery) => {
    const msg = callbackQuery.message;
    const data = callbackQuery.data;
    const chatId = msg.chat.id;
    const userId = callbackQuery.from.id;

    log('Callback', { data, userId });

    try {
        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await bot.answerCallbackQuery(callbackQuery.id);

        // –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã
        if (data === 'profile') {
            await showProfile(chatId, userId, msg.message_id);
        } else if (data === 'daily_click') {
            await dailyClick(chatId, userId, msg.message_id);
        } else if (data === 'referrals') {
            await showReferrals(chatId, userId, msg.message_id);
        } else if (data === 'tasks') {
            await showTasks(chatId, userId, msg.message_id);
        } else if (data === 'cases') {
            await showCases(chatId, userId, msg.message_id);
        } else if (data === 'pets') {
            await showPets(chatId, userId, msg.message_id);
        } else if (data === 'ratings') {
            await showRatings(chatId, userId, msg.message_id);
        } else if (data === 'lotteries') {
            await showLotteries(chatId, userId, msg.message_id);
        } else if (data === 'promo') {
            await showPromo(chatId, userId, msg.message_id);
        } else if (data === 'withdrawal') {
            await showWithdrawal(chatId, userId, msg.message_id);
        }
        // –ó–∞–¥–∞–Ω–∏—è
        else if (data.startsWith('task_complete_')) {
            const taskId = parseInt(data.split('_')[2]);
            await completeTask(chatId, userId, taskId);
        }
        // –ö–µ–π—Å—ã
        else if (data === 'open_case') {
            await openCase(chatId, userId);
        }
        // –ü–∏—Ç–æ–º—Ü—ã
        else if (data === 'pets_shop') {
            await showPetShop(chatId, userId, msg.message_id);
        } else if (data.startsWith('pet_buy_')) {
            const petId = parseInt(data.split('_')[2]);
            await buyPet(chatId, userId, petId);
        }
        // –õ–æ—Ç–µ—Ä–µ–∏
        else if (data.startsWith('lottery_buy_')) {
            const lotteryId = parseInt(data.split('_')[2]);
            await buyLotteryTicket(chatId, userId, lotteryId);
        }
        // –í—ã–≤–æ–¥
        else if (data.startsWith('withdraw_')) {
            const type = data.split('_')[1];
            await createWithdrawal(chatId, userId, type);
        }
        // –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        else if (data === 'main_menu') {
            try {
                await bot.editMessageText('üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
                    chat_id: chatId,
                    message_id: msg.message_id,
                    parse_mode: 'Markdown',
                    reply_markup: getMainMenu()
                });
            } catch (editError) {
                await bot.sendMessage(chatId, 'üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
                    parse_mode: 'Markdown',
                    reply_markup: getMainMenu()
                });
            }
        }
        // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback
        else {
            log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback', { data });
        }

    } catch (error) {
        log('–û—à–∏–±–∫–∞ –≤ callback', { error: error.message, data, userId });
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
});

// –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è
async function showTasks(chatId, userId, messageId = null) {
    try {
        log('–ü–æ–∫–∞–∑ –∑–∞–¥–∞–Ω–∏–π', { userId });

        const user = await db.get('SELECT * FROM users WHERE id = ?', [userId]);
        if (!user) {
            await bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è
        const allTasks = await db.all('SELECT * FROM tasks ORDER BY reward ASC');

        // –ü–æ–ª—É—á–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const completedTasks = await db.all('SELECT task_id FROM user_tasks WHERE user_id = ?', [userId]);
        const completedIds = completedTasks.map(t => t.task_id);

        // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–µ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ
        const currentTask = allTasks.find(task => !completedIds.includes(task.id));

        let message = `üìã **–ó–∞–¥–∞–Ω–∏—è**

üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance.toFixed(2)} ‚≠ê
‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: ${completedIds.length}/${allTasks.length}

`;

        const keyboard = [];

        if (currentTask) {
            message += `üéØ **–¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ:**

**${currentTask.title}**
${currentTask.description}

üí∞ **–ù–∞–≥—Ä–∞–¥–∞:** ${currentTask.reward} ‚≠ê

üîó **–°—Å—ã–ª–∫–∞:** ${currentTask.target_link}`;

            keyboard.push([{ text: '‚úÖ –í—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ', callback_data: `task_complete_${currentTask.id}` }]);
            keyboard.push([{ text: 'üîó –ü–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ', url: currentTask.target_link }]);
        } else {
            message += `üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**

–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è!
–û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π.`;
        }

        keyboard.push([{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]);

        const options = {
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: keyboard }
        };

        if (messageId) {
            try {
                await bot.editMessageText(message, {
                    chat_id: chatId,
                    message_id: messageId,
                    ...options
                });
            } catch (editError) {
                await bot.sendMessage(chatId, message, options);
            }
        } else {
            await bot.sendMessage(chatId, message, options);
        }

    } catch (error) {
        log('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∑–∞–¥–∞–Ω–∏–π', { error: error.message, userId });
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏–π');
    }
}

// –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
async function completeTask(chatId, userId, taskId) {
    try {
        log('–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è', { userId, taskId });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞–Ω–∏–µ
        const task = await db.get('SELECT * FROM tasks WHERE id = ?', [taskId]);
        if (!task) {
            await bot.sendMessage(chatId, '‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            return;
        }

        // ÔøΩÔøΩ—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ —É–∂–µ
        const completed = await db.get('SELECT id FROM user_tasks WHERE user_id = ? AND task_id = ?', [userId, taskId]);
        if (completed) {
            await bot.sendMessage(chatId, '‚ùå –í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ');
            return;
        }

        // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
        await db.run('INSERT INTO user_tasks (user_id, task_id) VALUES (?, ?)', [userId, taskId]);

        // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
        await db.run(
            'UPDATE users SET balance = balance + ?, total_earned = total_earned + ? WHERE id = ?',
            [task.reward, task.reward, userId]
        );

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        await db.run(
            'INSERT INTO transactions (user_id, type, amount, description) VALUES (?, ?, ?, ?)',
            [userId, 'task', task.reward, `–ó–∞–¥–∞–Ω–∏–µ: ${task.title}`]
        );

        log('–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ', { userId, taskId, reward: task.reward });

        await bot.sendMessage(chatId, `üéâ **–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!**

‚úÖ **–ó–∞–¥–∞–Ω–∏–µ:** ${task.title}
üí∞ **–ü–æ–ª—É—á–µ–Ω–æ:** +${task.reward} ‚≠ê

üöÄ –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–¥–∞–Ω–∏—é!`, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üìã –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ', callback_data: 'tasks' }],
                    [{ text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }]
                ]
            }
        });

    } catch (error) {
        log('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è', { error: error.message, userId, taskId });
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è');
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–µ–π—Å—ã
async function showCases(chatId, userId, messageId = null) {
    try {
        log('–ü–æ–∫–∞–∑ –∫–µ–π—Å–æ–≤', { userId });

        const user = await db.get('SELECT * FROM users WHERE id = ?', [userId]);
        if (!user) {
            await bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const today = new Date().toISOString().split('T')[0];
        const canOpenCase = user.level1_referrals >= 3 && user.last_case_date !== today;

        let message = `üì¶ **–ö–µ–π—Å—ã**

üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance.toFixed(2)} ‚≠ê
üë• –†–µ—Ñ–µ—Ä–∞–ª—ã: ${user.level1_referrals}

`;

        const keyboard = [];

        if (canOpenCase) {
            message += `üéÅ **–î–æ—Å—Ç—É–ø–µ–Ω –∫–µ–π—Å!**

ÔøΩÔøΩÔøΩ –£ –≤–∞—Å 3+ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
‚úÖ –°–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–ª–∏ –∫–µ–π—Å

üé≤ –û—Ç–∫—Ä–æ–π—Ç–µ –∫–µ–π—Å –∏ –ø–æ–ª—É—á–∏—Ç–µ —Å–ª—É—á–∞–π–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É!`;

            keyboard.push([{ text: 'üéÅ –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å', callback_data: 'open_case' }]);
        } else if (user.level1_referrals < 3) {
            message += `üîí **–ö–µ–π—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω**

‚ùå –ù—É–∂–Ω–æ 3+ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (—É –≤–∞—Å: ${user.level1_referrals})

üí° –ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–µ–π—Å–∞–º!`;

            keyboard.push([{ text: '‚≠ê –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', callback_data: 'referrals' }]);
        } else {
            message += `‚è∞ **–ö–µ–π—Å —É–∂–µ –æ—Ç–∫—Ä—ã—Ç —Å–µ–≥–æ–¥–Ω—è**

–ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞ –∑–∞ –Ω–æ–≤—ã–º –∫–µ–π—Å–æ–º!`;
        }

        keyboard.push([{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]);

        const options = {
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: keyboard }
        };

        if (messageId) {
            try {
                await bot.editMessageText(message, {
                    chat_id: chatId,
                    message_id: messageId,
                    ...options
                });
            } catch (editError) {
                await bot.sendMessage(chatId, message, options);
            }
        } else {
            await bot.sendMessage(chatId, message, options);
        }

    } catch (error) {
        log('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–µ–π—Å–æ–≤', { error: error.message, userId });
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–µ–π—Å–æ–≤');
    }
}

// –û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞
async function openCase(chatId, userId) {
    try {
        log('–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞', { userId });

        const user = await db.get('SELECT * FROM users WHERE id = ?', [userId]);
        if (!user) {
            await bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const today = new Date().toISOString().split('T')[0];

        // –ü—Ä–æ–≤–µ—Ä–∫–∏
        if (user.level1_referrals < 3) {
            await bot.sendMessage(chatId, '‚ùå –ù—É–∂–Ω–æ 3+ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞');
            return;
        }

        if (user.last_case_date === today) {
            await bot.sendMessage(chatId, '‚ùå –í—ã —É–∂–µ –æ—Ç–∫—Ä—ã–≤–∞–ª–∏ –∫–µ–π—Å —Å–µ–≥–æ–¥–Ω—è');
            return;
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É
        const rewards = [0.5, 1, 2, 3, 5, 10];
        const reward = rewards[Math.floor(Math.random() * rewards.length)];

        // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
        await db.run(
            'UPDATE users SET balance = balance + ?, total_earned = total_earned + ?, last_case_date = ? WHERE id = ?',
            [reward, reward, today, userId]
        );

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        await db.run(
            'INSERT INTO transactions (user_id, type, amount, description) VALUES (?, ?, ?, ?)',
            [userId, 'case', reward, '–ù–∞–≥—Ä–∞–¥–∞ –∏–∑ –∫–µ–π—Å–∞']
        );

        log('–ö–µ–π—Å –æ—Ç–∫—Ä—ã—Ç', { userId, reward });

        await bot.sendMessage(chatId, `üéÅ **–ö–ï–ô–° –û–¢–ö–†–´–¢!**

üíé **–í—ã –ø–æ–ª—É—á–∏–ª–∏:** ${reward} ‚≠ê

üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –≤—ã–∏–≥—Ä—ã—à–µ–º!
‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∫–µ–π—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∑–∞–≤—Ç—Ä–∞.`, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }],
                    [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                ]
            }
        });

    } catch (error) {
        log('–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞', { error: error.message, userId });
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–µ–π—Å–∞');
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏—Ç–æ–º—Ü–µ–≤
async function showPets(chatId, userId, messageId = null) {
    try {
        log('–ü–æ–∫–∞–∑ –ø–∏—Ç–æ–º—Ü–µ–≤', { userId });

        const user = await db.get('SELECT * FROM users WHERE id = ?', [userId]);
        if (!user) {
            await bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø–∏—Ç–æ–º—Ü–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userPets = await db.all(`
            SELECT up.id as user_pet_id, up.level, p.name, p.description, p.boost_multiplier, p.base_price, p.max_level, p.boost_type
            FROM user_pets up
            JOIN pets p ON up.pet_id = p.id
            WHERE up.user_id = ?
            ORDER BY up.id ASC
        `, [userId]);

        let message = `üêæ **–í–∞—à–∏ –ø–∏—Ç–æ–º—Ü—ã**

üí∞ –ë–∞–ª–∞–Ω—Å: ${user.balance.toFixed(2)} ‚≠ê

`;

        const keyboard = [];

        if (userPets.length === 0) {
            message += `üòî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤

üéØ –ü–∏—Ç–æ–º—Ü—ã —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –≤–∞—à –¥–æ—Ö–æ–¥ –æ—Ç –∫–ª–∏–∫–æ–≤ –∏ –∑–∞–¥–∞–Ω–∏–π!

üí° –ö—É–ø–∏—Ç–µ —Å–≤–æÔøΩÔøΩ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!`;
        } else {
            message += `üë• –í–∞—à–∏ –ø–∏—Ç–æ–º—Ü—ã:\n\n`;
            userPets.forEach((pet, index) => {
                const levelBoost = pet.boost_multiplier * pet.level;
                message += `${index + 1}. ${pet.name} (–£—Ä.${pet.level}/${pet.max_level})
   üìà –ë—É—Å—Ç: +${(levelBoost * 100).toFixed(1)}%
   üéØ –¢–∏–ø: ${pet.boost_type}

`;
            });

            keyboard.push([{ text: '‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –ø–∏—Ç–æ–º—Ü–µ–≤', callback_data: 'pets_upgrade' }]);
        }

        keyboard.push([{ text: 'üõí –ö—É–ø–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞', callback_data: 'pets_shop' }]);
        keyboard.push([{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]);

        const options = {
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: keyboard }
        };

        if (messageId) {
            try {
                await bot.editMessageText(message, {
                    chat_id: chatId,
                    message_id: messageId,
                    ...options
                });
            } catch (editError) {
                await bot.sendMessage(chatId, message, options);
            }
        } else {
            await bot.sendMessage(chatId, message, options);
        }

    } catch (error) {
        log('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–∏—Ç–æ–º—Ü–µ–≤', { error: error.message, userId });
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∏—Ç–æ–º—Ü–µ–≤');
    }
}

// –ú–∞–≥–∞–∑–∏–Ω –ø–∏—Ç–æ–º—Ü–µ–≤
async function showPetShop(chatId, userId, messageId = null) {
    try {
        log('–ü–æ–∫–∞–∑ –º–∞–≥–∞–∑–∏–Ω–∞ –ø–∏—Ç–æ–º—Ü–µ–≤', { userId });

        const user = await db.get('SELECT * FROM users WHERE id = ?', [userId]);
        if (!user) {
            await bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–∏—Ç–æ–º—Ü–µ–≤
        const allPets = await db.all('SELECT * FROM pets ORDER BY base_price ASC');

        // –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤
        const ownedPets = await db.all('SELECT pet_id FROM user_pets WHERE user_id = ?', [userId]);
        const ownedIds = ownedPets.map(p => p.pet_id);

        let message = `üõí **–ú–∞–≥–∞–∑–∏–Ω –ø–∏—Ç–æ–º—Ü–µ–≤**

üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance.toFixed(2)} ‚≠ê

üêæ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∏—Ç–æ–º—Ü—ã:**

`;

        const keyboard = [];

        allPets.forEach((pet, index) => {
            const isOwned = ownedIds.includes(pet.id);
            const canAfford = user.balance >= pet.base_price;

            let status = '';
            if (isOwned) {
                status = ' ‚úÖ –ö–£–ü–õ–ï–ù';
            } else if (!canAfford) {
                status = ' üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥';
            }

            message += `${index + 1}. **${pet.name}** - ${pet.base_price} ‚≠ê${status}
   üìà –ë—É—Å—Ç: +${(pet.boost_multiplier * 100).toFixed(1)}%
   üéØ –¢–∏–ø: ${pet.boost_type}
   üìù ${pet.description}

`;

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–∫—É–ø–∫–∏
            if (!isOwned && canAfford) {
                keyboard.push([{
                    text: `üõí –ö—É–ø–∏—Ç—å ${pet.name} (${pet.base_price} ‚≠ê)`,
                    callback_data: `pet_buy_${pet.id}`
                }]);
            }
        });

        keyboard.push([{ text: 'üêæ –ú–æ–∏ –ø–∏—Ç–æ–º—Ü—ã', callback_data: 'pets' }]);
        keyboard.push([{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]);

        const options = {
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: keyboard }
        };

        if (messageId) {
            try {
                await bot.editMessageText(message, {
                    chat_id: chatId,
                    message_id: messageId,
                    ...options
                });
            } catch (editError) {
                await bot.sendMessage(chatId, message, options);
            }
        } else {
            await bot.sendMessage(chatId, message, options);
        }

    } catch (error) {
        log('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –º–∞–≥–∞–∑–∏–Ω–∞ –ø–∏—Ç–æ–º—Ü–µ–≤', { error: error.message, userId });
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞–≥–∞–∑–∏–Ω–∞');
    }
}

// –ü–æ–∫—É–ø–∫–∞ –ø–∏—Ç–æ–º—Ü–∞
async function buyPet(chatId, userId, petId) {
    try {
        log('–ü–æ–∫—É–ø–∫–∞ –ø–∏—Ç–æ–º—Ü–∞', { userId, petId });

        const user = await db.get('SELECT * FROM users WHERE id = ?', [userId]);
        const pet = await db.get('SELECT * FROM pets WHERE id = ?', [petId]);

        if (!user || !pet) {
            await bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –ø–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∏
        const existingPet = await db.get('SELECT id FROM user_pets WHERE user_id = ? AND pet_id = ?', [userId, petId]);
        if (existingPet) {
            await bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç –ø–∏—Ç–æ–º–µ—Ü');
            return;
        }

        if (user.balance < pet.base_price) {
            await bot.sendMessage(chatId, `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥! –ù—É–∂–Ω–æ: ${pet.base_price} ‚≠ê`);
            return;
        }

        // –ü–æ–∫—É–ø–∞–µ–º –ø–∏—Ç–æ–º—Ü–∞
        await db.run('UPDATE users SET balance = balance - ? WHERE id = ?', [pet.base_price, userId]);
        await db.run('INSERT INTO user_pets (user_id, pet_id, level) VALUES (?, ?, ?)', [userId, petId, 1]);
        await db.run(
            'INSERT INTO transactions (user_id, type, amount, description) VALUES (?, ?, ?, ?)',
            [userId, 'pet', -pet.base_price, `–ü–æ–∫—É–ø–∫–∞ –ø–∏—Ç–æ–º—Ü–∞: ${pet.name}`]
        );

        log('–ü–∏—Ç–æ–º–µ—Ü –∫—É–ø–ª–µ–Ω', { userId, petId, price: pet.base_price });

        await bot.sendMessage(chatId, `üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!**

üêæ –í—ã –∫—É–ø–∏–ª–∏: ${pet.name}
üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${pet.base_price} ‚≠ê
üíé –û—Å—Ç–∞—Ç–æ–∫: ${(user.balance - pet.base_price).toFixed(2)} ‚≠ê

üìà –í–∞—à –¥–æ—Ö–æ–¥ —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ ${(pet.boost_multiplier * 100).toFixed(1)}%!`, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üêæ –ú–æ–∏ –ø–∏—Ç–æ–º—Ü—ã', callback_data: 'pets' }],
                    [{ text: 'üõí –ö—É–ø–∏—Ç—å –µ—â—ë', callback_data: 'pets_shop' }]
                ]
            }
        });

    } catch (error) {
        log('–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–∏—Ç–æ–ºÔøΩÔøΩ–∞', { error: error.message, userId, petId });
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–∏—Ç–æ–º—Ü–∞');
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∏
async function showRatings(chatId, userId, messageId = null) {
    try {
        log('–ü–æ–∫–∞–∑ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤', { userId });

        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º –∑–∞ –Ω–µ–¥–µ–ª—é
        const weekStart = new Date();
        weekStart.setDate(weekStart.getDate() - 7);
        const weekStartStr = weekStart.toISOString().split('T')[0];

        const topUsers = await db.all(`
            SELECT u.id, u.first_name, u.username, u.level1_referrals,
                   COUNT(ref.id) as week_referrals
            FROM users u
            LEFT JOIN users ref ON ref.referrer_id = u.id
                AND ref.registration_date > ?
            GROUP BY u.id
            ORDER BY week_referrals DESC, u.level1_referrals DESC
            LIMIT 10
        `, [weekStartStr]);

        let message = `üèÜ **–†–µ–π—Ç–∏–Ω–≥–∏**

üìä **–¢–æ–ø –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º –∑–∞ –Ω–µ–¥–µ–ª—é:**

`;

        topUsers.forEach((user, index) => {
            const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `${index + 1}.`;
            const name = user.username ? `@${user.username}` : user.first_name;
            message += `${medal} ${name} - ${user.week_referrals} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n`;
        });

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–∑–∏—Ü–∏—é —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userPosition = topUsers.findIndex(u => u.id === userId);
        if (userPosition !== -1) {
            message += `\nüë§ **–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è:** ${userPosition + 1} –º–µ—Å—Ç–æ`;
        } else {
            message += `\nüë§ **–í–∞—à–∞ –ø–æ–∑–∏—Ü–∏—è:** –Ω–µ –≤ —Ç–æ–ø–µ`;
        }

        const options = {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: '‚≠ê –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', callback_data: 'referrals' }],
                    [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                ]
            }
        };

        if (messageId) {
            try {
                await bot.editMessageText(message, {
                    chat_id: chatId,
                    message_id: messageId,
                    ...options
                });
            } catch (editError) {
                await bot.sendMessage(chatId, message, options);
            }
        } else {
            await bot.sendMessage(chatId, message, options);
        }

    } catch (error) {
        log('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤', { error: error.message, userId });
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤');
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ—Ç–µ—Ä–µ–∏
async function showLotteries(chatId, userId, messageId = null) {
    try {
        log('–ü–æ–∫–∞–∑ –ª–æ—Ç–µ—Ä–µ–π', { userId });

        const user = await db.get('SELECT * FROM users WHERE id = ?', [userId]);
        if (!user) {
            await bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç–µ—Ä–µ–∏
        const lotteries = await db.all('SELECT * FROM lotteries WHERE is_active = 1');

        let message = `üé∞ **–õ–æ—Ç–µ—Ä–µ–∏**

üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance.toFixed(2)} ‚≠ê

üé≤ **–ê–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç–µ—Ä–µ–∏:**

`;

        const keyboard = [];

        if (lotteries.length === 0) {
            message += `üòî –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–π.

–û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π!`;
        } else {
            for (const lottery of lotteries) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –±–∏–ª–µ—Ç
                const hasTicket = await db.get('SELECT id FROM lottery_tickets WHERE lottery_id = ? AND user_id = ?', [lottery.id, userId]);

                message += `üé´ **${lottery.name}**
üí∞ –¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞: ${lottery.ticket_price} ‚≠ê
üíé –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥: ${lottery.total_pool.toFixed(2)} ‚≠ê
üìù ${lottery.description}

`;

                if (hasTicket) {
                    message += `‚úÖ –£ –≤–∞—Å –µ—Å—Ç—å –±–∏–ª–µ—Ç\n\n`;
                } else if (user.balance >= lottery.ticket_price) {
                    keyboard.push([{
                        text: `üé´ –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç ${lottery.name} (${lottery.ticket_price} ‚≠ê)`,
                        callback_data: `lottery_buy_${lottery.id}`
                    }]);
                    message += `üõí –ú–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç\n\n`;
                } else {
                    message += `üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥\n\n`;
                }
            }
        }

        keyboard.push([{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]);

        const options = {
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: keyboard }
        };

        if (messageId) {
            try {
                await bot.editMessageText(message, {
                    chat_id: chatId,
                    message_id: messageId,
                    ...options
                });
            } catch (editError) {
                await bot.sendMessage(chatId, message, options);
            }
        } else {
            await bot.sendMessage(chatId, message, options);
        }

    } catch (error) {
        log('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ª–æ—Ç–µ—Ä–µ–π', { error: error.message, userId });
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ—Ç–µ—Ä–µ–π');
    }
}

// –ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–∞ –ª–æ—Ç–µ—Ä–µ–∏
async function buyLotteryTicket(chatId, userId, lotteryId) {
    try {
        log('–ü–æ–∫—É–ø–∫–∞ –±–∏–ª–µ—Ç–∞ –ª–æ—Ç–µ—Ä–µ–∏', { userId, lotteryId });

        const user = await db.get('SELECT * FROM users WHERE id = ?', [userId]);
        const lottery = await db.get('SELECT * FROM lotteries WHERE id = ? AND is_active = 1', [lotteryId]);

        if (!user || !lottery) {
            await bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –ª–æ—Ç–µ—Ä–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∏
        const hasTicket = await db.get('SELECT id FROM lottery_tickets WHERE lottery_id = ? AND user_id = ?', [lotteryId, userId]);
        if (hasTicket) {
            await bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –±–∏–ª–µ—Ç –Ω–∞ —ç—Ç—É –ª–æ—Ç–µ—Ä–µ—é');
            return;
        }

        if (user.balance < lottery.ticket_price) {
            await bot.sendMessage(chatId, `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥! –ù—É–∂–Ω–æ: ${lottery.ticket_price} ‚≠ê`);
            return;
        }

        // –ü–æ–∫—É–ø–∞–µ–º –±–∏–ª–µ—Ç
        const poolIncrease = lottery.ticket_price * (1 - lottery.bot_commission);

        await db.run('UPDATE users SET balance = balance - ? WHERE id = ?', [lottery.ticket_price, userId]);
        await db.run('INSERT INTO lottery_tickets (lottery_id, user_id) VALUES (?, ?)', [lotteryId, userId]);
        await db.run('UPDATE lotteries SET total_pool = total_pool + ? WHERE id = ?', [poolIncrease, lotteryId]);
        await db.run(
            'INSERT INTO transactions (user_id, type, amount, description) VALUES (?, ?, ?, ?)',
            [userId, 'lottery', -lottery.ticket_price, `–ë–∏–ª–µ—Ç –≤ –ª–æ—Ç–µ—Ä–µ—é: ${lottery.name}`]
        );

        log('–ë–∏–ª–µ—Ç –∫—É–ø–ª–µ–Ω', { userId, lotteryId, price: lottery.ticket_price });

        await bot.sendMessage(chatId, `üé´ **–ë–∏–ª–µ—Ç –∫—É–ø–ª–µ–Ω!**

üé∞ –õ–æ—Ç–µ—Ä–µ—è: ${lottery.name}
üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${lottery.ticket_price} ‚≠ê
üíé –û—Å—Ç–∞—Ç–æ–∫: ${(user.balance - lottery.ticket_price).toFixed(2)} ‚≠ê

üçÄ –£–¥–∞—á–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!`, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üé∞ –õ–æ—Ç–µ—Ä–µ–∏', callback_data: 'lotteries' }],
                    [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                ]
            }
        });

    } catch (error) {
        log('–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–∞', { error: error.message, userId, lotteryId });
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –±–∏–ª–µ—Ç–∞');
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã
async function showPromo(chatId, userId, messageId = null) {
    try {
        log('–ü–æ–∫–∞–∑ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤', { userId });

        const user = await db.get('SELECT * FROM users WHERE id = ?', [userId]);
        if (!user) {
            await bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const message = `üé´ **–ü—Ä–æ–º–æ–∫–æ–¥—ã**

üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance.toFixed(2)} ‚≠ê

üéÅ **–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥:**
‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–æ–≤–æ—Å—Ç—è–º–∏ –≤ –∫–∞–Ω–∞–ª–µ
‚Ä¢ –£—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –∫–æ–Ω–∫—É—Ä—Å–∞—Ö
‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π

üí° **–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
–üÔøΩÔøΩ–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –±–æ—Ç—É –ª—é–±—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.

üî• –ü—Ä–æ–º–æ–∫–æ–¥—ã –¥–∞—é—Ç –±–æ–Ω—É—Å–Ω—ã–µ –∑–≤—ë–∑–¥—ã!`;

        const options = {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                ]
            }
        };

        if (messageId) {
            try {
                await bot.editMessageText(message, {
                    chat_id: chatId,
                    message_id: messageId,
                    ...options
                });
            } catch (editError) {
                await bot.sendMessage(chatId, message, options);
            }
        } else {
            await bot.sendMessage(chatId, message, options);
        }

    } catch (error) {
        log('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤', { error: error.message, userId });
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤');
    }
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
async function usePromoCode(chatId, userId, code) {
    try {
        log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞', { userId, code });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        const promo = await db.get('SELECT * FROM promo_codes WHERE code = ? AND is_active = 1', [code]);
        if (!promo) {
            await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        const used = await db.get('SELECT id FROM user_promo_codes WHERE user_id = ? AND promo_code_id = ?', [userId, promo.id]);
        if (used) {
            await bot.sendMessage(chatId, '‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
        if (promo.current_uses >= promo.max_uses) {
            await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—á–µ—Ä–ø–∞–Ω');
            return;
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        await db.run('UPDATE users SET balance = balance + ?, total_earned = total_earned + ? WHERE id = ?', [promo.reward, promo.reward, userId]);
        await db.run('INSERT INTO user_promo_codes (user_id, promo_code_id) VALUES (?, ?)', [userId, promo.id]);
        await db.run('UPDATE promo_codes SET current_uses = current_uses + 1 WHERE id = ?', [promo.id]);
        await db.run(
            'INSERT INTO transactions (user_id, type, amount, description) VALUES (?, ?, ?, ?)',
            [userId, 'promo', promo.reward, `–ü—Ä–æ–º–æ–∫–æ–¥: ${promo.code}`]
        );

        log('–ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω', { userId, code, reward: promo.reward });

        await bot.sendMessage(chatId, `üéâ **–ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!**

üé´ –ü—Ä–æ–º–æ–∫–æ–¥: ${promo.code}
üí∞ –ü–æ–ª—É—á–µ–Ω–æ: +${promo.reward} ‚≠ê

üéÅ –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞!`, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }],
                    [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                ]
            }
        });

    } catch (error) {
        log('–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞', { error: error.message, userId, code });
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞');
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–≤–æ–¥–∞
async function showWithdrawal(chatId, userId, messageId = null) {
    try {
        log('–ü–æ–∫–∞–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –≤—ã–≤–æ–¥–∞', { userId });

        const user = await db.get('SELECT * FROM users WHERE id = ?', [userId]);
        if (!user) {
            await bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const message = `üí∞ **–í—ã–≤–æ–¥ –∑–≤—ë–∑–¥**

üíé –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance.toFixed(2)} ‚≠ê

üí∏ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–≤–æ–¥–∞:**

‚Ä¢ 15 ‚≠ê ‚Üí 15 Telegram Stars
‚Ä¢ 25 ‚≠ê ‚Üí 25 Telegram Stars
‚Ä¢ 50 ‚≠ê ‚Üí 50 Telegram Stars
‚Ä¢ 100 ‚≠ê ‚Üí 100 Telegram Stars
‚Ä¢ 1300 ‚≠ê ‚Üí Telegram Premium (3 –º–µ—Å—è—Ü–∞)

‚ö†Ô∏è **–í–∞–∂–Ω–æ:**
–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.
–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 24 —á–∞—Å–æ–≤.`;

        const keyboard = [];

        if (user.balance >= 15) keyboard.push([{ text: 'üí∞ –í—ã–≤–µ—Å—Ç–∏ 15 ‚≠ê', callback_data: 'withdraw_15' }]);
        if (user.balance >= 25) keyboard.push([{ text: 'üí∞ –í—ã–≤–µ—Å—Ç–∏ 25 ‚≠ê', callback_data: 'withdraw_25' }]);
        if (user.balance >= 50) keyboard.push([{ text: 'üí∞ –í—ã–≤–µ—Å—Ç–∏ 50 ‚≠ê', callback_data: 'withdraw_50' }]);
        if (user.balance >= 100) keyboard.push([{ text: 'üí∞ –í—ã–≤–µ—Å—Ç–∏ 100 ‚≠ê', callback_data: 'withdraw_100' }]);
        if (user.balance >= 1300) keyboard.push([{ text: 'üëë –í—ã–≤–µ—Å—Ç–∏ Premium (1300 ‚≠ê)', callback_data: 'withdraw_premium' }]);

        keyboard.push([{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]);

        const options = {
            parse_mode: 'Markdown',
            reply_markup: { inline_keyboard: keyboard }
        };

        if (messageId) {
            try {
                await bot.editMessageText(message, {
                    chat_id: chatId,
                    message_id: messageId,
                    ...options
                });
            } catch (editError) {
                await bot.sendMessage(chatId, message, options);
            }
        } else {
            await bot.sendMessage(chatId, message, options);
        }

    } catch (error) {
        log('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≤—ã–≤–æ–¥–∞', { error: error.message, userId });
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—ã–≤–æ–¥–∞');
    }
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥
async function createWithdrawal(chatId, userId, type) {
    try {
        log('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥', { userId, type });

        const user = await db.get('SELECT * FROM users WHERE id = ?', [userId]);
        if (!user) {
            await bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
        const withdrawalTypes = {
            '15': { amount: 15, description: '15 Telegram Stars' },
            '25': { amount: 25, description: '25 Telegram Stars' },
            '50': { amount: 50, description: '50 Telegram Stars' },
            '100': { amount: 100, description: '100 Telegram Stars' },
            'premium': { amount: 1300, description: 'Telegram Premium (3 –º–µ—Å—è—Ü–∞)' }
        };

        const withdrawalInfo = withdrawalTypes[type];
        if (!withdrawalInfo) {
            await bot.sendMessage(chatId, '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –≤—ã–≤–æ–¥–∞');
            return;
        }

        if (user.balance < withdrawalInfo.amount) {
            await bot.sendMessage(chatId, `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥! –ù—É–∂–Ω–æ: ${withdrawalInfo.amount} ‚≠ê`);
            return;
        }

        // –°–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É
        await db.run('UPDATE users SET balance = balance - ? WHERE id = ?', [withdrawalInfo.amount, userId]);
        const result = await db.run(
            'INSERT INTO withdrawals (user_id, amount, withdrawal_type, status) VALUES (?, ?, ?, ?)',
            [userId, withdrawalInfo.amount, type, 'pending']
        );
        await db.run(
            'INSERT INTO transactions (user_id, type, amount, description) VALUES (?, ?, ?, ?)',
            [userId, 'withdrawal_request', -withdrawalInfo.amount, `–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥: ${withdrawalInfo.description}`]
        );

        const withdrawalId = result.lastInsertRowid;

        log('–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞', { userId, withdrawalId, amount: withdrawalInfo.amount });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª –≤—ã–≤–æ–¥–∞
        try {
            const userLink = user.username ? `@${user.username}` : `[${user.first_name}](tg://user?id=${user.id})`;

            await bot.sendMessage('@kirbyvivodstars', `üí∞ **–ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –í–´–í–û–î #${withdrawalId}**

üë§ **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** ${userLink}
üÜî **ID:** \`${user.id}\`
üí∞ **–°—É–º–º–∞:** ${withdrawalInfo.amount} ‚≠ê
üéØ **–¢–∏–ø:** ${withdrawalInfo.description}
üìÖ **–î–∞—Ç–∞:** ${new Date().toLocaleString('ru-RU')}

‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∑–∞—è–≤–∫—É –∏ –ø—Ä–∏–º–∏—Ç–µ —Ä–µ—à–µ–Ω–∏–µ:`, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data: `admin_approve_${withdrawalId}` },
                            { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `admin_reject_${withdrawalId}` }
                        ]
                    ]
                }
            });
        } catch (notificationError) {
            log('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª –≤—ã–≤–æ–¥–∞', { error: notificationError.message });
        }

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.sendMessage(chatId, `‚úÖ **–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞!**

üÜî –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #${withdrawalId}
üí∞ –°—É–º–º–∞: ${withdrawalInfo.amount} ‚≠ê
üéØ –¢–∏–ø: ${withdrawalInfo.description}
üíé –û—Å—Ç–∞—Ç–æ–∫: ${(user.balance - withdrawalInfo.amount).toFixed(2)} ‚≠ê

‚è∞ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.
üì± –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ.`, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }],
                    [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                ]
            }
        });

    } catch (error) {
        log('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏', { error: error.message, userId, type });
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ polling
bot.on('polling_error', (error) => {
    if (error.code === 'ETELEGRAM' && error.message.includes('409 Conflict')) {
        log('–ö–æ–Ω—ÑÔøΩÔøΩ–∏–∫—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞ - –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è Railway');
    } else {
        log('–û—à–∏–±–∫–∞ polling', { error: error.message });
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
async function init() {
    try {
        console.log('üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        await db.init();
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞');

        console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
        log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫
init();

module.exports = { bot, db };
