require('dotenv').config();

console.log('üöÄ –ó–∞–ø—É—Å–∫ –ù–û–í–û–ì–û StarKirby Bot...');
console.log('üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:', process.cwd());

const TelegramBot = require('node-telegram-bot-api');
const Database = require('./database');

const BOT_TOKEN = process.env.BOT_TOKEN;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
if (!BOT_TOKEN) {
    console.error('‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    process.exit(1);
}

console.log('‚úÖ –¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞...');

// –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, {
    polling: true
});

// –°–æ–∑–¥–∞—ë–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
const db = new Database();

// –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
function log(message, data = null) {
    const timestamp = new Date().toISOString();
    console.log(`[${timestamp}] BOT: ${message}`, data ? JSON.stringify(data) : '');
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
function generateReferralCode() {
    return Math.random().toString(36).substring(2, 8).toUpperCase();
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function getMainMenu() {
    return {
        inline_keyboard: [
            [
                { text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' },
                { text: 'üëÜ –ö–ª–∏–∫–Ω—É—Ç—å', callback_data: 'daily_click' }
            ],
            [
                { text: 'üìã –ó–∞–¥–∞–Ω–∏—è', callback_data: 'tasks' },
                { text: '‚≠ê –ü–æ–ª—É—á–∏—Ç—å –∑–≤—ë–∑–¥—ã', callback_data: 'referrals' }
            ],
            [
                { text: 'üì¶ –ö–µ–π—Å', callback_data: 'cases' },
                { text: 'üêæ –ü–∏—Ç–æ–º—Ü—ã', callback_data: 'pets' }
            ]
        ]
    };
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async function registerUser(userId, username, firstName, referralCode = null) {
    try {
        log('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', { userId, username, firstName, referralCode });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
        const existingUser = await db.get('SELECT * FROM users WHERE id = ?', [userId]);
        if (existingUser) {
            log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', { userId });
            return existingUser;
        }

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
        let userReferralCode;
        let isUnique = false;
        while (!isUnique) {
            userReferralCode = generateReferralCode();
            const existing = await db.get('SELECT id FROM users WHERE referral_code = ?', [userReferralCode]);
            if (!existing) {
                isUnique = true;
            }
        }

        // –ò—â–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
        let referrerId = null;
        if (referralCode) {
            const referrer = await db.get('SELECT id FROM users WHERE referral_code = ?', [referralCode]);
            if (referrer) {
                referrerId = referrer.id;
                log('–ù–∞–π–¥–µ–Ω –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π', { referrerId });
            }
        }

        // –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await db.run(
            'INSERT INTO users (id, username, first_name, balance, referrer_id, referral_code, level1_referrals, level2_referrals, total_earned, last_click_date, cases_opened_today, last_case_date) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)',
            [userId, username, firstName, 0, referrerId, userReferralCode, 0, 0, 0, null, 0, null]
        );

        log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω', { userId, userReferralCode });

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É
        if (referrerId) {
            await processReferralReward(userId, referrerId);
        }

        return await db.get('SELECT * FROM users WHERE id = ?', [userId]);

    } catch (error) {
        log('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', { error: error.message, userId });
        throw error;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
async function processReferralReward(newUserId, referrerId) {
    try {
        log('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã', { newUserId, referrerId });

        // –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
        await db.run(
            'UPDATE users SET balance = balance + 3, total_earned = total_earned + 3, level1_referrals = level1_referrals + 1 WHERE id = ?',
            [referrerId]
        );

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        await db.run(
            'INSERT INTO transactions (user_id, type, amount, description) VALUES (?, ?, ?, ?)',
            [referrerId, 'referral', 3, `–ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª (ID: ${newUserId})`]
        );

        log('–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ ÔøΩÔøΩ—ã–¥–∞–Ω–∞', { referrerId, amount: 3 });

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ
        try {
            await bot.sendMessage(referrerId, `üéâ **–ù–û–í–´–ô –†–ï–§–ï–†–ê–õ!**

üë§ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!

üí∞ **–ù–∞–≥—Ä–∞–¥–∞:** +3 ‚≠ê

üî• –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π!`, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [{ text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }],
                        [{ text: '‚≠ê –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –µ—â—ë', callback_data: 'referrals' }]
                    ]
                }
            });
        } catch (notificationError) {
            log('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', { error: notificationError.message });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞ 2 —É—Ä–æ–≤–Ω—è
        const referrer = await db.get('SELECT referrer_id FROM users WHERE id = ?', [referrerId]);
        if (referrer && referrer.referrer_id) {
            log('–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ 2 —É—Ä–æ–≤–Ω—è', { level2ReferrerId: referrer.referrer_id });

            await db.run(
                'UPDATE users SET balance = balance + 0.05, total_earned = total_earned + 0.05, level2_referrals = level2_referrals + 1 WHERE id = ?',
                [referrer.referrer_id]
            );

            await db.run(
                'INSERT INTO transactions (user_id, type, amount, description) VALUES (?, ?, ?, ?)',
                [referrer.referrer_id, 'referral', 0.05, `–†–µ—Ñ–µ—Ä–∞–ª 2 —É—Ä–æ–≤–Ω—è (ID: ${newUserId})`]
            );

            // –£–≤–µ–¥–æ–º–ª—è–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞ 2 —É—Ä–æ–≤–Ω—è
            try {
                await bot.sendMessage(referrer.referrer_id, `üéâ **–†–ï–§–ï–†–ê–õ 2 –£–†–û–í–ù–Ø!**

üë• –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª –ø—Ä–∏–≤—ë–ª –¥—Ä—É–≥–∞!

üí∞ **–ù–∞–≥—Ä–∞–¥–∞:** +0.05 ‚≠ê

üî• –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –±–æ–ª—å—à–µ –¥—Ä—É–∑–µ–π!`, {
                    parse_mode: 'Markdown'
                });
            } catch (notificationError) {
                log('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è 2 —É—Ä–æ–≤–Ω—è', { error: notificationError.message });
            }
        }

    } catch (error) {
        log('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã', { error: error.message, newUserId, referrerId });
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
async function showProfile(chatId, userId, messageId = null) {
    try {
        log('–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è', { userId });

        const user = await db.get('SELECT * FROM users WHERE id = ?', [userId]);
        if (!user) {
            await bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const profileMessage = `üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**

üí∞ **–ë–∞–ª–∞–Ω—Å:** ${user.balance.toFixed(2)} ‚≠ê
üíé **–û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫:** ${user.total_earned.toFixed(2)} ‚≠ê

üë• **–†–µ—Ñ–µ—Ä–∞–ª—ã:**
‚îú –£—Ä–æ–≤–µ–Ω—å 1: ${user.level1_referrals} —á–µ–ª–æ–≤–µ–∫
‚îî –£—Ä–æ–≤–µ–Ω—å 2: ${user.level2_referrals} —á–µ–ª–æ–≤–µ–∫

üîó **–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:**
\`https://t.me/kirbystarsfarmbot?start=${user.referral_code}\`

üí° –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏!`;

        const options = {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üëÜ –ö–ª–∏–∫–Ω—É—Ç—å', callback_data: 'daily_click' }],
                    [{ text: '‚≠ê –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', callback_data: 'referrals' }],
                    [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                ]
            }
        };

        if (messageId) {
            try {
                await bot.editMessageText(profileMessage, {
                    chat_id: chatId,
                    message_id: messageId,
                    ...options
                });
            } catch (editError) {
                await bot.sendMessage(chatId, profileMessage, options);
            }
        } else {
            await bot.sendMessage(chatId, profileMessage, options);
        }

    } catch (error) {
        log('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è', { error: error.message, userId });
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è');
    }
}

// –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–ª–∏–∫
async function dailyClick(chatId, userId, messageId = null) {
    try {
        log('–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–ª–∏–∫', { userId });

        const user = await db.get('SELECT * FROM users WHERE id = ?', [userId]);
        if (!user) {
            await bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const today = new Date().toISOString().split('T')[0];
        if (user.last_click_date === today) {
            log('–£–∂–µ –∫–ª–∏–∫–∞–ª —Å–µ–≥–æ–¥–Ω—è', { userId });
            await bot.sendMessage(chatId, '‚è∞ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –∫–ª–∏–∫ —Å–µ–≥–æ–¥–Ω—è! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞.');
            return;
        }

        const reward = 0.1;

        // –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
        await db.run(
            'UPDATE users SET balance = balance + ?, total_earned = total_earned + ?, last_click_date = ? WHERE id = ?',
            [reward, reward, today, userId]
        );

        // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        await db.run(
            'INSERT INTO transactions (user_id, type, amount, description) VALUES (?, ?, ?, ?)',
            [userId, 'click', reward, '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–ª–∏–∫']
        );

        log('–ù–∞–≥—Ä–∞–¥–∞ –∑–∞ –∫–ª–∏–∫ –Ω–∞—á–∏—Å–ª–µ–Ω–∞', { userId, reward });

        const successMessage = `üéâ **–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞!**

üí∞ **–ü–æ–ª—É—á–µ–Ω–æ:** +${reward} ‚≠ê

‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∫–ª–∏–∫ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∑–∞–≤—Ç—Ä–∞!
üöÄ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –¥–ª—è –±–æ–ª—å—à–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∫–∞!`;

        const options = {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }],
                    [{ text: '‚≠ê –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', callback_data: 'referrals' }],
                    [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                ]
            }
        };

        if (messageId) {
            try {
                await bot.editMessageText(successMessage, {
                    chat_id: chatId,
                    message_id: messageId,
                    ...options
                });
            } catch (editError) {
                await bot.sendMessage(chatId, successMessage, options);
            }
        } else {
            await bot.sendMessage(chatId, successMessage, options);
        }

    } catch (error) {
        log('–û—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∫–ª–∏–∫–∞', { error: error.message, userId });
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã');
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
async function showReferrals(chatId, userId, messageId = null) {
    try {
        log('–ü–æ–∫–∞–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏', { userId });

        const user = await db.get('SELECT * FROM users WHERE id = ?', [userId]);
        if (!user) {
            await bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const referralMessage = `‚≠ê **–ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π!**

üéØ **–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
‚Ä¢ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞: **+3 ‚≠ê**
‚Ä¢ –ó–∞ –∫–∞–∂–¥–æ–≥–æ –¥—Ä—É–≥–∞ –≤–∞—à–∏—Ö –¥—Ä—É–∑–µ–π: **+0.05 ‚≠ê**

üìä **–í–∞—à–∞ —Å—Ç–∞—Ç–∏—ÅÔøΩÔøΩ–∏–∫–∞:**
üë• –†–µ—Ñ–µ—Ä–∞–ª—ã 1 —É—Ä–æ–≤–Ω—è: ${user.level1_referrals}
üë• –†–µ—Ñ–µ—Ä–∞–ª—ã 2 —É—Ä–æ–≤–Ω—è: ${user.level2_referrals}
üí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${user.balance.toFixed(2)} ‚≠ê

üîó **–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:**
https://t.me/kirbystarsfarmbot?start=${user.referral_code}

üì≤ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥—Ä—É–∑—å—è–º!`;

        const options = {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [
                    [{ text: 'üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π', switch_inline_query: `üåü –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ Kirby Stars Farm!\n\nüéÅ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è –ø–æ –º–æ–µ–π —Å—Å—ã–ª–∫–µ: https://t.me/kirbystarsfarmbot?start=${user.referral_code}` }],
                    [{ text: 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' }],
                    [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                ]
            }
        };

        if (messageId) {
            try {
                await bot.editMessageText(referralMessage, {
                    chat_id: chatId,
                    message_id: messageId,
                    ...options
                });
            } catch (editError) {
                await bot.sendMessage(chatId, referralMessage, options);
            }
        } else {
            await bot.sendMessage(chatId, referralMessage, options);
        }

    } catch (error) {
        log('–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤', { error: error.message, userId });
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏');
    }
}

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.onText(/\/start(?:\s+(.+))?/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const username = msg.from.username;
    const firstName = msg.from.first_name;
    const referralCode = match[1];

    try {
        log('–ö–æ–º–∞–Ω–¥–∞ /start', { userId, username, firstName, referralCode });

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await registerUser(userId, username, firstName, referralCode);

        const welcomeMessage = `üåü **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Kirby Stars Farm!**

üëã –ü—Ä–∏–≤–µ—Ç, ${firstName}!

üí´ **–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ Telegram Stars**

üéØ **–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞:**
‚Ä¢ üëÜ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–ª–∏–∫–∏ ‚Äî 0.1 ‚≠ê –≤ –¥–µ–Ω—å
‚Ä¢ üìã –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π ‚Äî –±—ã—Å—Ç—Ä—ã–µ –Ω–∞–≥—Ä–∞–¥—ã
‚Ä¢ üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ ‚Äî 3 ‚≠ê –∑–∞ –¥—Ä—É–≥–∞
‚Ä¢ üì¶ –ö–µ–π—Å—ã ‚Äî —Å–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–∏–∑—ã
‚Ä¢ üêæ –ü–∏—Ç–æ–º—Ü—ã ‚Äî —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–æ–≤

üöÄ –ù–∞—á–Ω–∏—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!`;

        await bot.sendMessage(chatId, welcomeMessage, {
            parse_mode: 'Markdown',
            reply_markup: getMainMenu()
        });

    } catch (error) {
        log('–û—à–∏–±–∫–∞ –≤ /start', { error: error.message, userId });
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–æ–≤
bot.on('callback_query', async (callbackQuery) => {
    const msg = callbackQuery.message;
    const data = callbackQuery.data;
    const chatId = msg.chat.id;
    const userId = callbackQuery.from.id;

    log('Callback', { data, userId });

    try {
        // –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
        await bot.answerCallbackQuery(callbackQuery.id);

        switch (data) {
            case 'profile':
                await showProfile(chatId, userId, msg.message_id);
                break;

            case 'daily_click':
                await dailyClick(chatId, userId, msg.message_id);
                break;

            case 'referrals':
                await showReferrals(chatId, userId, msg.message_id);
                break;

            case 'main_menu':
                try {
                    await bot.editMessageText('üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
                        chat_id: chatId,
                        message_id: msg.message_id,
                        parse_mode: 'Markdown',
                        reply_markup: getMainMenu()
                    });
                } catch (editError) {
                    await bot.sendMessage(chatId, 'üè† **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
                        parse_mode: 'Markdown',
                        reply_markup: getMainMenu()
                    });
                }
                break;

            case 'tasks':
            case 'cases':
            case 'pets':
                await bot.sendMessage(chatId, 'üöß –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –µ—â—ë —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è!');
                break;

            default:
                log('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π callback', { data });
                break;
        }

    } catch (error) {
        log('–û—à–∏–±–∫–∞ –≤ callback', { error: error.message, data, userId });
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞');
    }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ polling
bot.on('polling_error', (error) => {
    if (error.code === 'ETELEGRAM' && error.message.includes('409 Conflict')) {
        log('–ö–æ–Ω—Ñ–ª–∏–∫—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ –±–æ—Ç–∞ - –Ω–æ—Ä–º–∞–ª—å–Ω–æ –¥–ª—è Railway');
    } else {
        log('–û—à–∏–±–∫–∞ polling', { error: error.message });
    }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
async function init() {
    try {
        console.log('üîå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
        await db.init();
        console.log('‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞');

        console.log('ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
        log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫
init();

module.exports = { bot, db };
