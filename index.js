require('dotenv').config();

console.log('üöÄ –ó–∞–ø—É—Å–∫ –ù–û–í–û–ì–û StarKirby Bot...');
console.log('üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:', process.cwd());

const TelegramBot = require('node-telegram-bot-api');
const Database = require('./database');

const BOT_TOKEN = process.env.BOT_TOKEN;

// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
if (!BOT_TOKEN) {
    console.error('‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω!');
    process.exit(1);
}

console.log('‚úÖ –¢–æ–∫–µ–Ω –∑–∞–≥—Ä—É–∂–µ–Ω, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞...');

// –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, {
    polling: true
});

// –°–æ–∑–¥–∞—ë–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
const db = new Database();

// –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
function log(message, data = null) {
    const timestamp = new Date().toISOString();
    console.log(`[${timestamp}] BOT: ${message}`, data ? JSON.stringify(data) : '');
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
function generateReferralCode() {
    return Math.random().toString(36).substring(2, 8).toUpperCase();
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function getMainMenu() {
    return {
        inline_keyboard: [
            [
                { text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'profile' },
                { text: 'üëÜ –ö–ª–∏–∫–Ω—É—Ç—å', callback_data: 'daily_click' }
            ],
            [
                { text: 'üìã –ó–∞–¥–∞–Ω–∏—è', callback_data: 'tasks' },
                { text: '‚≠ê –ü–æ–ª—É—á–∏—Ç—å –∑–≤—ë–∑–¥—ã', callback_data: 'referrals' }
            ],
            [
                { text: 'üéÅ –ö–µ–π—Å—ã', callback_data: 'cases' },
                { text: 'üêï –ü–∏—Ç–æ–º—Ü—ã', callback_data: 'pets' }
            ],
            [
                { text: 'üèÜ –†–µ–π—Ç–∏–Ω–≥–∏', callback_data: 'ratings' },
                { text: 'üé∞ –õ–æ—Ç–µ—Ä–µ–∏', callback_data: 'lotteries' }
            ],
            [
                { text: 'üí∞ –í—ã–≤–æ–¥', callback_data: 'withdrawal' }
            ]
        ]
    };
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function registerUser(userId, username, referredBy = null) {
    log(`–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const existingUser = db.getUser(userId);
        if (existingUser) {
            log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
            return existingUser;
        }

        const referralCode = generateReferralCode();
        
        // –°–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const newUser = {
            userId: userId,
            username: username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
            balance: 0,
            referralCode: referralCode,
            totalReferrals: 0,
            registeredAt: Date.now(),
            lastClickTime: null
        };

        db.createUser(newUser);
        log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} —Å–æ–∑–¥–∞–Ω —Å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º ${referralCode}`);

        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª–∞
        if (referredBy) {
            processReferralReward(referredBy, userId);
        }

        return newUser;
    } catch (error) {
        log(`–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error.message);
        throw error;
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã
function processReferralReward(referrerCode, newUserId) {
    log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: –∫–æ–¥ ${referrerCode}, –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${newUserId}`);
    
    try {
        // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É
        const referrer = db.getUserByReferralCode(referrerCode);
        if (!referrer) {
            log(`–†–µ—Ñ–µ—Ä–µ—Ä —Å –∫–æ–¥–æ–º ${referrerCode} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            return;
        }

        log(`–ù–∞–π–¥–µ–Ω —Ä–µ—Ñ–µ—Ä–µ—Ä: ${referrer.userId}`);

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤
        db.updateUserField(referrer.userId, 'totalReferrals', referrer.totalReferrals + 1);
        
        // –î–∞—ë–º –Ω–∞–≥—Ä–∞–¥—É –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞ (3 –∑–≤–µ–∑–¥—ã)
        const newBalance = referrer.balance + 3;
        db.updateUserField(referrer.userId, 'balance', newBalance);

        log(`–†–µ—Ñ–µ—Ä–µ—Ä ${referrer.userId} –ø–æ–ª—É—á–∏–ª 3 –∑–≤–µ–∑–¥—ã. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance}, —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${referrer.totalReferrals + 1}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ 2-–≥–æ —É—Ä–æ–≤–Ω—è
        const level2Referrer = db.getUserByReferralCode(referrer.referredBy);
        if (level2Referrer) {
            const level2NewBalance = level2Referrer.balance + 0.05;
            db.updateUserField(level2Referrer.userId, 'balance', level2NewBalance);
            log(`–†–µ—Ñ–µ—Ä–µ—Ä 2-–≥–æ —É—Ä–æ–≤–Ω—è ${level2Referrer.userId} –ø–æ–ª—É—á–∏–ª 0.05 –∑–≤–µ–∑–¥—ã`);
        }
    } catch (error) {
        log(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–∞:`, error.message);
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
async function showProfile(chatId, userId) {
    log(`–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è ${userId}`);
    
    try {
        const user = db.getUser(userId);
        if (!user) {
            await bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –ø–∏—Ç–æ–º—Ü–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userPets = db.getUserPets(userId);
        const petsText = userPets.length > 0 
            ? userPets.map(pet => `${pet.emoji} ${pet.name} (—É—Ä.${pet.level})`).join(', ')
            : '–ù–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤';

        const profileText = `üë§ **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**

üí∞ –ë–∞–ª–∞–Ω—Å: ${user.balance} ‚≠ê
üë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${user.totalReferrals}
üîó –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: \`${user.referralCode}\`
üêï –ü–∏—Ç–æ–º—Ü—ã: ${petsText}

üì± –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –∫–æ–¥–æ–º —Å –¥—Ä—É–∑—å—è–º–∏ –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –∑–≤—ë–∑–¥—ã!`;

        await bot.sendMessage(chatId, profileText, {
            parse_mode: 'Markdown',
            reply_markup: getMainMenu()
        });
    } catch (error) {
        log(`–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø—Ä–æ—Ñ–∏–ª—è:`, error.message);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è');
    }
}

// –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–ª–∏–∫
async function dailyClick(chatId, userId) {
    log(`–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–ª–∏–∫ –æ—Ç ${userId}`);
    
    try {
        const user = db.getUser(userId);
        if (!user) {
            await bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const now = Date.now();
        const lastClick = user.lastClickTime;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ 24 —á–∞—Å–∞
        if (lastClick && (now - lastClick) < 24 * 60 * 60 * 1000) {
            const timeLeft = 24 * 60 * 60 * 1000 - (now - lastClick);
            const hoursLeft = Math.ceil(timeLeft / (60 * 60 * 1000));
            
            await bot.sendMessage(chatId, `‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∫–ª–∏–∫ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω —á–µ—Ä–µ–∑ ${hoursLeft} —á–∞—Å–æ–≤`, {
                reply_markup: getMainMenu()
            });
            return;
        }

        // –î–∞—ë–º –Ω–∞–≥—Ä–∞–¥—É
        const newBalance = user.balance + 0.1;
        db.updateUserField(userId, 'balance', newBalance);
        db.updateUserField(userId, 'lastClickTime', now);

        log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –ø–æ–ª—É—á–∏–ª 0.1 –∑–≤–µ–∑–¥—ã. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${newBalance}`);

        await bot.sendMessage(chatId, `‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ 0.1 ‚≠ê!\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${newBalance} ‚≠ê`, {
            reply_markup: getMainMenu()
        });
    } catch (error) {
        log(`–û—à–∏–±–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∫–ª–∏–∫–∞:`, error.message);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–ª–∏–∫–∞');
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è
async function showTasks(chatId, userId) {
    log(`–ü–æ–∫–∞–∑ –∑–∞–¥–∞–Ω–∏–π –¥–ª—è ${userId}`);
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è
        const allTasks = db.getAllTasks();
        const completedTaskIds = db.getUserCompletedTasks(userId);
        
        if (allTasks.length === 0) {
            await bot.sendMessage(chatId, 'üìã –ó–∞–¥–∞–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç', {
                reply_markup: getMainMenu()
            });
            return;
        }

        let tasksText = 'üìã **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:**\n\n';
        
        allTasks.forEach(task => {
            const isCompleted = completedTaskIds.includes(task.id);
            const status = isCompleted ? '‚úÖ' : '‚≠ê';
            tasksText += `${status} ${task.title}\nüí∞ –ù–∞–≥—Ä–∞–¥–∞: ${task.reward} ‚≠ê\nüìù ${task.description}\n\n`;
        });

        const keyboard = {
            inline_keyboard: []
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        allTasks.forEach(task => {
            const isCompleted = completedTaskIds.includes(task.id);
            if (!isCompleted) {
                keyboard.inline_keyboard.push([{
                    text: `–í—ã–ø–æ–ª–Ω–∏—Ç—å: ${task.title}`,
                    callback_data: `complete_task_${task.id}`
                }]);
            }
        });

        keyboard.inline_keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]);

        await bot.sendMessage(chatId, tasksText, {
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    } catch (error) {
        log(`–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∑–∞–¥–∞–Ω–∏–π:`, error.message);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏–π');
    }
}

// –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
async function completeTask(chatId, userId, taskId) {
    log(`–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è ${taskId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}`);
    
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ª–∏ –∑–∞–¥–∞–Ω–∏–µ
        const completedTasks = db.getUserCompletedTasks(userId);
        if (completedTasks.includes(taskId)) {
            await bot.sendMessage(chatId, '‚ùå –ó–∞–¥–∞–Ω–∏–µ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!');
            return;
        }

        const task = db.getTask(taskId);
        if (!task) {
            await bot.sendMessage(chatId, '‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ!');
            return;
        }

        // –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ
        db.completeUserTask(userId, taskId);
        
        // –î–∞—ë–º –Ω–∞–≥—Ä–∞–¥—É
        const user = db.getUser(userId);
        const newBalance = user.balance + task.reward;
        db.updateUserField(userId, 'balance', newBalance);

        log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –≤—ã–ø–æ–ª–Ω–∏–ª –∑–∞–¥–∞–Ω–∏–µ ${taskId} –∏ –ø–æ–ª—É—á–∏–ª ${task.reward} –∑–≤–µ–∑–¥`);

        await bot.sendMessage(chatId, `‚úÖ –ó–∞–¥–∞–Ω–∏–µ "${task.title}" –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\nüí∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${task.reward} ‚≠ê\nüí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ${newBalance} ‚≠ê`, {
            reply_markup: getMainMenu()
        });
    } catch (error) {
        log(`–û—à–∏–±–∫–∞ ÔøΩÔøΩ—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:`, error.message);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è');
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∫–µ–π—Å—ã
async function showCases(chatId, userId) {
    log(`–ü–æ–∫–∞–∑ –∫–µ–π—Å–æ–≤ –¥–ª—è ${userId}`);
    
    try {
        const user = db.getUser(userId);
        if (!user) {
            await bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ–π—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userCases = db.getUserCases(userId);
        const dailyCase = userCases.find(c => c.type === 'daily');
        
        const now = new Date();
        const today = now.toDateString();
        
        let canOpenDaily = true;
        if (dailyCase && new Date(dailyCase.lastOpenTime).toDateString() === today) {
            canOpenDaily = false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∫–µ–π—Å–∞ (3+ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤)
        const meetsRequirement = user.totalReferrals >= 3;

        let casesText = 'üéÅ **–ö–µ–π—Å—ã**\n\n';
        casesText += 'üì¶ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å\n';
        casesText += `üí∞ –ù–∞–≥—Ä–∞–¥–∞: 1-5 ‚≠ê\n`;
        casesText += `üë• –¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ: 3+ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (—É –≤–∞—Å: ${user.totalReferrals})\n`;
        
        if (!meetsRequirement) {
            casesText += '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n';
        } else if (!canOpenDaily) {
            casesText += '‚è∞ –£–∂–µ –æ—Ç–∫—Ä—ã—Ç —Å–µ–≥–æ–¥–Ω—è\n';
        } else {
            casesText += '‚úÖ –î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è\n';
        }

        const keyboard = {
            inline_keyboard: []
        };

        if (meetsRequirement && canOpenDaily) {
            keyboard.inline_keyboard.push([{
                text: 'üéÅ –û—Ç–∫—Ä—ã—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å',
                callback_data: 'open_case_daily'
            }]);
        }

        keyboard.inline_keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]);

        await bot.sendMessage(chatId, casesText, {
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    } catch (error) {
        log(`–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–µ–π—Å–æ–≤:`, error.message);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–µ–π—Å–æ–≤');
    }
}

// –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å
async function openCase(chatId, userId, caseType) {
    log(`–û—Ç–∫—Ä—ã—Ç–∏–µ –∫–µ–π—Å–∞ ${caseType} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}`);
    
    try {
        const user = db.getUser(userId);
        if (!user) {
            await bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        if (caseType === 'daily') {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è
            if (user.totalReferrals < 3) {
                await bot.sendMessage(chatId, '‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 3 —Ä–µ—Ñ–µ—Ä–∞–ª–∞ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –∫–µ–π—Å–∞');
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞–ª—Å—è –ª–∏ —Å–µ–≥–æ–¥–Ω—è
            const userCases = db.getUserCases(userId);
            const dailyCase = userCases.find(c => c.type === 'daily');
            
            const now = new Date();
            const today = now.toDateString();
            
            if (dailyCase && new Date(dailyCase.lastOpenTime).toDateString() === today) {
                await bot.sendMessage(chatId, '‚ùå –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å —É–∂–µ –æ—Ç–∫—Ä—ã—Ç —Å–µ–≥–æ–¥–Ω—è');
                return;
            }

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–≥—Ä–∞–¥—É (1-5 –∑–≤–µ–∑–¥)
            const reward = Math.floor(Math.random() * 5) + 1;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            const newBalance = user.balance + reward;
            db.updateUserField(userId, 'balance', newBalance);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–µ–π—Å–∞
            db.saveUserCase(userId, 'daily', Date.now());

            log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –æ—Ç–∫—Ä—ã–ª –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å –∏ –ø–æ–ª—É—á–∏–ª ${reward} –∑–≤–µ–∑–¥`);

            await bot.sendMessage(chatId, `üéÅ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í—ã –æ—Ç–∫—Ä—ã–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–µ–π—Å –∏ –ø–æ–ª—É—á–∏–ª–∏ ${reward} ‚≠ê!\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${newBalance} ‚≠ê`, {
                reply_markup: getMainMenu()
            });
        }
    } catch (error) {
        log(`–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞:`, error.message);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–µ–π—Å–∞');
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏—Ç–æ–º—Ü–µ–≤
async function showPets(chatId, userId) {
    log(`–ü–æ–∫–∞–∑ –ø–∏—Ç–æ–º—Ü–µ–≤ –¥–ª—è ${userId}`);
    
    try {
        const user = db.getUser(userId);
        if (!user) {
            await bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤
        const allPets = db.getAllPets();
        const userPets = db.getUserPets(userId);

        let petsText = 'üêï **–ü–∏—Ç–æ–º—Ü—ã**\n\n';
        petsText += `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance} ‚≠ê\n\n`;

        if (userPets.length > 0) {
            petsText += 'üë• **–í–∞—à–∏ –ø–∏—Ç–æ–º—Ü—ã:**\n';
            userPets.forEach(pet => {
                petsText += `${pet.emoji} ${pet.name} (—É—Ä–æ–≤–µ–Ω—å ${pet.level})\n`;
            });
            petsText += '\n';
        }

        petsText += 'üõí **–î–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏:**\n';
        
        const keyboard = {
            inline_keyboard: []
        };

        allPets.forEach(pet => {
            const userHasPet = userPets.find(up => up.petId === pet.id);
            if (!userHasPet) {
                petsText += `${pet.emoji} ${pet.name} - ${pet.price} ‚≠ê\n`;
                keyboard.inline_keyboard.push([{
                    text: `${pet.emoji} –ö—É–ø–∏—Ç—å ${pet.name} (${pet.price}‚≠ê)`,
                    callback_data: `buy_pet_${pet.id}`
                }]);
            } else {
                const nextLevelPrice = pet.price * userHasPet.level;
                petsText += `${pet.emoji} ${pet.name} - —É–ª—É—á—à–∏—Ç—å –¥–æ —É—Ä.${userHasPet.level + 1} (${nextLevelPrice}‚≠ê)\n`;
                keyboard.inline_keyboard.push([{
                    text: `${pet.emoji} –£–ª—É—á—à–∏—Ç—å ${pet.name} (${nextLevelPrice}‚≠ê)`,
                    callback_data: `upgrade_pet_${pet.id}`
                }]);
            }
        });

        keyboard.inline_keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]);

        await bot.sendMessage(chatId, petsText, {
            parse_mode: 'Markdown',
            reply_markup: keyboard
        });
    } catch (error) {
        log(`–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ø–∏—Ç–æ–º—Ü–µ–≤:`, error.message);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∏—Ç–æ–º—Ü–µ–≤');
    }
}

// –ö—É–ø–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞
async function buyPet(chatId, userId, petId) {
    log(`–ü–æ–∫—É–ø–∫–∞ –ø–∏—Ç–æ–º—Ü–∞ ${petId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}`);
    
    try {
        const user = db.getUser(userId);
        if (!user) {
            await bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const pet = db.getPet(petId);
        if (!pet) {
            await bot.sendMessage(chatId, '‚ùå –ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –ø–∏—Ç–æ–º–µ—Ü
        const userPets = db.getUserPets(userId);
        const existingPet = userPets.find(up => up.petId === petId);
        
        if (existingPet) {
            await bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç –ø–∏—Ç–æ–º–µ—Ü! –í—ã –º–æ–∂–µ—Ç–µ –µ–≥–æ —É–ª—É—á—à–∏—Ç—å.');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if (user.balance < pet.price) {
            await bot.sendMessage(chatId, `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥! –ù—É–∂–Ω–æ: ${pet.price} ‚≠ê, —É –≤–∞—Å: ${user.balance} ‚≠ê`);
            return;
        }

        // –ü–æ–∫—É–ø–∞–µ–º –ø–∏—Ç–æ–º—Ü–∞
        const newBalance = user.balance - pet.price;
        db.updateUserField(userId, 'balance', newBalance);
        db.addUserPet(userId, petId, 1);

        log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∫—É–ø–∏–ª –ø–∏—Ç–æ–º—Ü–∞ ${pet.name} –∑–∞ ${pet.price} –∑–≤–µ–∑–¥`);

        await bot.sendMessage(chatId, `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!\n–í—ã –∫—É–ø–∏–ª–∏ ${pet.emoji} ${pet.name}!\nüí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${pet.price} ‚≠ê\nüí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ${newBalance} ‚≠ê`, {
            reply_markup: getMainMenu()
        });
    } catch (error) {
        log(`–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–∏—Ç–æ–º—Ü–∞:`, error.message);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–∏—Ç–æ–º—Ü–∞');
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥–∏
async function showRatings(chatId) {
    log('–ü–æ–∫–∞–∑ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤');
    
    try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º –∑–∞ –Ω–µ–¥–µ–ª—é
        const topUsers = db.getTopUsersByReferrals(10);
        
        let ratingsText = 'üèÜ **–†–µ–π—Ç–∏–Ω–≥ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º (—ç—Ç–∞ –Ω–µ–¥–µ–ª—è)**\n\n';
        
        if (topUsers.length === 0) {
            ratingsText += '–†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç';
        } else {
            topUsers.forEach((user, index) => {
                const medal = index === 0 ? 'ü•á' : index === 1 ? 'ü•à' : index === 2 ? 'ü•â' : `${index + 1}.`;
                ratingsText += `${medal} ${user.username || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'} - ${user.totalReferrals} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤\n`;
            });
        }

        await bot.sendMessage(chatId, ratingsText, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]]
            }
        });
    } catch (error) {
        log(`–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤:`, error.message);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤');
    }
}

// –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ—Ç–µ—Ä–µ–∏
async function showLotteries(chatId, userId) {
    log(`–ü–æ–∫–∞–∑ –ª–æ—Ç–µ—Ä–µ–π –¥–ª—è ${userId}`);
    
    try {
        const user = db.getUser(userId);
        if (!user) {
            await bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–æ—Ç–µ—Ä–µ–∏
        const activeLotteries = db.getActiveLotteries();
        
        let lotteriesText = 'üé∞ **–õ–æ—Ç–µ—Ä–µ–∏**\n\n';
        lotteriesText += `üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance} ‚≠ê\n\n`;

        if (activeLotteries.length === 0) {
            lotteriesText += '–ê–∫—Ç–∏–≤–Ω—ã—Ö –ª–æ—Ç–µ—Ä–µ–π –Ω–µ—Ç';
        } else {
            const keyboard = {
                inline_keyboard: []
            };

            activeLotteries.forEach(lottery => {
                const ticketsSold = db.getLotteryTicketCount(lottery.id);
                const prizePool = ticketsSold * lottery.ticketPrice;
                
                lotteriesText += `üé´ **${lottery.title}**\n`;
                lotteriesText += `üí∞ –¶–µ–Ω–∞ –±–∏–ª–µ—Ç–∞: ${lottery.ticketPrice} ‚≠ê\n`;
                lotteriesText += `üèÜ –ü—Ä–∏–∑–æ–≤–æ–π —Ñ–æ–Ω–¥: ${prizePool} ‚≠ê\n`;
                lotteriesText += `üéüÔ∏è –ë–∏–ª–µ—Ç–æ–≤ –ø—Ä–æ–¥–∞–Ω–æ: ${ticketsSold}\n`;
                lotteriesText += `‚è∞ –î–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: ${new Date(lottery.drawTime).toLocaleString()}\n\n`;

                keyboard.inline_keyboard.push([{
                    text: `üé´ –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç ${lottery.title} (${lottery.ticketPrice}‚≠ê)`,
                    callback_data: `buy_lottery_${lottery.id}`
                }]);
            });

            keyboard.inline_keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]);

            await bot.sendMessage(chatId, lotteriesText, {
                parse_mode: 'Markdown',
                reply_markup: keyboard
            });
            return;
        }

        await bot.sendMessage(chatId, lotteriesText, {
            parse_mode: 'Markdown',
            reply_markup: {
                inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]]
            }
        });
    } catch (error) {
        log(`–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –ª–æ—Ç–µ—Ä–µ–π:`, error.message);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ—Ç–µ—Ä–µ–π');
    }
}

// –ö—É–ø–∏—Ç—å –ª–æ—Ç–µ—Ä–µ–π–Ω—ã–π –±–∏–ª–µ—Ç
async function buyLotteryTicket(chatId, userId, lotteryId) {
    log(`–ü–æ–∫—É–ø–∫–∞ –ª–æ—Ç–µ—Ä–µ–π–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞ ${lotteryId} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}`);
    
    try {
        const user = db.getUser(userId);
        if (!user) {
            await bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const lottery = db.getLottery(lotteryId);
        if (!lottery) {
            await bot.sendMessage(chatId, '‚ùå –õ–æ—Ç–µ—Ä–µ—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if (user.balance < lottery.ticketPrice) {
            await bot.sendMessage(chatId, `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥! –ù—É–∂–Ω–æ: ${lottery.ticketPrice} ‚≠ê, —É –≤–∞—Å: ${user.balance} ‚≠ê`);
            return;
        }

        // –ü–æ–∫—É–ø–∞–µ–º –±–∏–ª–µ—Ç
        const newBalance = user.balance - lottery.ticketPrice;
        db.updateUserField(userId, 'balance', newBalance);
        db.addLotteryTicket(userId, lotteryId);

        log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∫—É–ø–∏–ª –±–∏–ª–µ—Ç –ª–æ—Ç–µ—Ä–µ–∏ ${lottery.title} –∑–∞ ${lottery.ticketPrice} –∑–≤–µ–∑–¥`);

        await bot.sendMessage(chatId, `üé´ –ë–∏–ª–µ—Ç –∫—É–ø–ª–µ–Ω!\n–õ–æ—Ç–µ—Ä–µ—è: ${lottery.title}\nüí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${lottery.ticketPrice} ‚≠ê\nüí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ${newBalance} ‚≠ê\nüçÄ –£–¥–∞—á–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!`, {
            reply_markup: getMainMenu()
        });
    } catch (error) {
        log(`–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ª–æ—Ç–µ—Ä–µ–π–Ω–æ–≥–æ –±–∏–ª–µ—Ç–∞:`, error.message);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –±–∏–ª–µ—Ç–∞');
    }
}

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥
async function usePromoCode(chatId, userId, promoCode) {
    log(`–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ ${promoCode} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}`);
    
    try {
        const user = db.getUser(userId);
        if (!user) {
            await bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const promo = db.getPromoCode(promoCode);
        if (!promo) {
            await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥
        const usedPromos = db.getUserUsedPromoCodes(userId);
        if (usedPromos.includes(promo.id)) {
            await bot.sendMessage(chatId, '‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
        const usageCount = db.getPromoCodeUsageCount(promo.id);
        if (promo.usageLimit && usageCount >= promo.usageLimit) {
            await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—á–µ—Ä–ø–∞–Ω');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        if (promo.expiryTime && Date.now() > promo.expiryTime) {
            await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—Ç—ë–∫');
            return;
        }

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–º–æ–∫–æ–¥
        const newBalance = user.balance + promo.reward;
        db.updateUserField(userId, 'balance', newBalance);
        db.markPromoCodeAsUsed(userId, promo.id);

        log(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥ ${promoCode} –∏ –ø–æ–ª—É—á–∏–ª ${promo.reward} –∑–≤–µ–∑–¥`);

        await bot.sendMessage(chatId, `‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\nüéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ ${promo.reward} ‚≠ê\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${newBalance} ‚≠ê`, {
            reply_markup: getMainMenu()
        });
    } catch (error) {
        log(`–û—à–∏–±–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞:`, error.message);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞');
    }
}

// –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥
async function createWithdrawal(chatId, userId, amount) {
    log(`–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥ ${amount} –∑–≤–µ–∑–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ${userId}`);
    
    try {
        const user = db.getUser(userId);
        if (!user) {
            await bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        if (user.balance < amount) {
            await bot.sendMessage(chatId, `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥! –£ –≤–∞—Å: ${user.balance} ‚≠ê, –Ω—É–∂–Ω–æ: ${amount} ‚≠ê`);
            return;
        }

        // –°–ø–∏—Å—ã–≤–∞–µ–º –∑–≤—ë–∑–¥—ã
        const newBalance = user.balance - amount;
        db.updateUserField(userId, 'balance', newBalance);

        // –°–æ–∑–¥–∞—ë–º –∑–∞—è–≤–∫—É
        const withdrawalId = db.createWithdrawal(userId, amount);

        log(`–°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ #${withdrawalId} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–∞ —Å—É–º–º—É ${amount} –∑–≤–µ–∑–¥`);

        // –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        try {
            await bot.sendMessage('@kirbyvivodstars', `üí∞ **–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥**

üìã ID –∑–∞—è–≤–∫–∏: #${withdrawalId}
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.username} (${userId})
üí∞ –°—É–º–º–∞: ${amount} ‚≠ê
‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString()}

–û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∑–∞—è–≤–∫—É –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.`, {
                parse_mode: 'Markdown'
            });
        } catch (notifyError) {
            log('–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', notifyError.message);
        }

        await bot.sendMessage(chatId, `‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —Å–æ–∑–¥–∞–Ω–∞!\nüìã ID –∑–∞—è–≤–∫–∏: #${withdrawalId}\nüí∞ –°—É–º–º–∞: ${amount} ‚≠ê\nüí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ${newBalance} ‚≠ê\n\n‚è∞ –ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤`, {
            reply_markup: getMainMenu()
        });
    } catch (error) {
        log(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥:`, error.message);
        await bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥');
    }
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start(.*)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const username = msg.from.username || msg.from.first_name;
    const startParam = match[1] ? match[1].trim() : null;

    log(`–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º: ${startParam}`);

    try {
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const referralCode = startParam ? startParam : null;
        const user = registerUser(userId, username, referralCode);

        const welcomeText = `üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ StarKirby Bot!

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ üëÜ –ö–ª–∏–∫–∞—Ç—å –∏ –ø–æ–ª—É—á–∞—Ç—å –∑–≤—ë–∑–¥—ã
‚Ä¢ üë• –ü—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞—Ç—å –±–æ–Ω—É—Å—ã  
‚Ä¢ üìã –í—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è
‚Ä¢ üêï –ü–æ–∫—É–ø–∞—Ç—å –ø–∏—Ç–æ–º—Ü–µ–≤
‚Ä¢ üéÅ –û—Ç–∫—Ä—ã–≤–∞—Ç—å –∫–µ–π—Å—ã
‚Ä¢ üí∞ –í—ã–≤–æ–¥–∏—Ç—å –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–≤—ë–∑–¥—ã

–ù–∞—á–Ω–∏—Ç–µ —Å –∏–∑—É—á–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è!`;

        await bot.sendMessage(chatId, welcomeText, {
            reply_markup: getMainMenu()
        });
    } catch (error) {
        log(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ /start:`, error.message);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–ø—Ä–æ–º–æ–∫–æ–¥—ã)
bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const userId = msg.from.id;
    const text = msg.text;

    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if (text && text.startsWith('/')) {
        return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—ÇÔøΩÔøΩ—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–º
    if (text && text.length >= 3 && text.length <= 20) {
        log(`–í–æ–∑–º–æ–∂–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –æ—Ç ${userId}: ${text}`);
        await usePromoCode(chatId, userId, text.toUpperCase());
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback –∑–∞–ø—Ä–æ—Å–æ–≤
bot.on('callback_query', async (query) => {
    const chatId = query.message.chat.id;
    const userId = query.from.id;
    const data = query.data;

    log(`Callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}: ${data}`);

    try {
        await bot.answerCallbackQuery(query.id);

        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        const username = query.from.username || query.from.first_name;
        registerUser(userId, username);

        switch (data) {
            case 'main_menu':
                await bot.editMessageText('üåü –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é StarKirby Bot', {
                    chat_id: chatId,
                    message_id: query.message.message_id,
                    reply_markup: getMainMenu()
                });
                break;

            case 'profile':
                await showProfile(chatId, userId);
                break;

            case 'daily_click':
                await dailyClick(chatId, userId);
                break;

            case 'tasks':
                await showTasks(chatId, userId);
                break;

            case 'referrals':
                const user = db.getUser(userId);
                const referralText = `‚≠ê **–ü–æ–ª—É—á–∏—Ç—å –∑–≤—ë–∑–¥—ã —á–µ—Ä–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤**

üîó –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: \`${user.referralCode}\`
üë• –í–∞—à–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${user.totalReferrals}

üí∞ **–ù–∞–≥—Ä–∞–¥—ã:**
‚Ä¢ 1-–π —É—Ä–æ–≤–µ–Ω—å: +3 ‚≠ê –∑–∞ –∫–∞–∂–¥–æ–≥–æ
‚Ä¢ 2-–π —É—Ä–æ–≤–µ–Ω—å: +0.05 ‚≠ê –∑–∞ –∫–∞–∂–¥–æ–≥–æ

üì± –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π:
https://t.me/StarKirbyBot?start=${user.referralCode}`;

                await bot.sendMessage(chatId, referralText, {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: [[{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]]
                    }
                });
                break;

            case 'cases':
                await showCases(chatId, userId);
                break;

            case 'pets':
                await showPets(chatId, userId);
                break;

            case 'ratings':
                await showRatings(chatId);
                break;

            case 'lotteries':
                await showLotteries(chatId, userId);
                break;

            case 'withdrawal':
                const userBalance = db.getUser(userId).balance;
                const withdrawalText = `üí∞ **–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤**

üí≥ –í–∞—à –±–∞–ª–∞–Ω—Å: ${userBalance} ‚≠ê

–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—É–º–º—ã –¥–ª—è –≤—ã–≤–æ–¥–∞:`;

                const withdrawalKeyboard = {
                    inline_keyboard: []
                };

                const amounts = [15, 25, 50, 100];
                amounts.forEach(amount => {
                    if (userBalance >= amount) {
                        withdrawalKeyboard.inline_keyboard.push([{
                            text: `üí∞ –í—ã–≤–µ—Å—Ç–∏ ${amount} ‚≠ê`,
                            callback_data: `withdraw_${amount}`
                        }]);
                    }
                });

                // Premium –æ–ø—Ü–∏—è
                withdrawalKeyboard.inline_keyboard.push([{
                    text: '‚≠ê Premium Telegram (200‚≠ê)',
                    callback_data: 'withdraw_premium'
                }]);

                withdrawalKeyboard.inline_keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥', callback_data: 'main_menu' }]);

                await bot.sendMessage(chatId, withdrawalText, {
                    parse_mode: 'Markdown',
                    reply_markup: withdrawalKeyboard
                });
                break;

            default:
                // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö callback'–æ–≤
                if (data.startsWith('complete_task_')) {
                    const taskId = parseInt(data.replace('complete_task_', ''));
                    await completeTask(chatId, userId, taskId);
                } else if (data.startsWith('open_case_')) {
                    const caseType = data.replace('open_case_', '');
                    await openCase(chatId, userId, caseType);
                } else if (data.startsWith('buy_pet_')) {
                    const petId = parseInt(data.replace('buy_pet_', ''));
                    await buyPet(chatId, userId, petId);
                } else if (data.startsWith('upgrade_pet_')) {
                    const petId = parseInt(data.replace('upgrade_pet_', ''));
                    // –õ–æ–≥–∏–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –ø–∏—Ç–æ–º—Ü–∞ –∞–Ω–∞–ª–æ–≥–∏—á–Ω–∞ –ø–æ–∫—É–ø–∫–µ
                    await buyPet(chatId, userId, petId);
                } else if (data.startsWith('buy_lottery_')) {
                    const lotteryId = parseInt(data.replace('buy_lottery_', ''));
                    await buyLotteryTicket(chatId, userId, lotteryId);
                } else if (data.startsWith('withdraw_')) {
                    const amountStr = data.replace('withdraw_', '');
                    if (amountStr === 'premium') {
                        await createWithdrawal(chatId, userId, 200);
                    } else {
                        const amount = parseInt(amountStr);
                        await createWithdrawal(chatId, userId, amount);
                    }
                }
                break;
        }
    } catch (error) {
        log(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback:`, error.message);
        await bot.sendMessage(chatId, '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.');
    }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
bot.on('error', (error) => {
    log('–û—à–∏–±–∫–∞ –±–æ—Ç–∞:', error.message);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
console.log('‚úÖ StarKirby Bot –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!');
log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω');
