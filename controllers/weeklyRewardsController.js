const cron = require('node-cron');

class WeeklyRewardsController {
    constructor(database, bot) {
        this.db = database;
        this.bot = bot;
        this.adminId = 6910097562;
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º cron –∑–∞–¥–∞—á—É –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 20:00 –ø–æ –ú–°–ö
        this.startWeeklyRewards();
    }

    startWeeklyRewards() {
        // Cron –≤—ã—Ä–∞–∂–µ–Ω–∏–µ: –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 20:00 –ø–æ –ú–°–ö (UTC+3)
        // 0 17 * * 0 - —ç—Ç–æ 17:00 UTC (20:00 –ú–°–ö) –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        cron.schedule('0 17 * * 0', async () => {
            console.log('üèÜ Starting weekly rewards distribution...');
            await this.distributeWeeklyRewards();
        }, {
            timezone: "Europe/Moscow"
        });

        console.log('‚úÖ Weekly rewards cron job scheduled for every Sunday at 20:00 MSK');
    }

    async distributeWeeklyRewards() {
        try {
            console.log('üìä Calculating weekly top 5 users...');
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è
            const topUsers = await this.db.all(`
                SELECT 
                    id, 
                    username, 
                    first_name, 
                    level1_referrals,
                    balance
                FROM users
                WHERE level1_referrals > 0
                ORDER BY level1_referrals DESC, registration_date ASC
                LIMIT 5
            `);

            if (topUsers.length === 0) {
                console.log('‚ùå No users with referrals found');
                await this.bot.sendMessage(this.adminId, 'üìä –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                return;
            }

            // –ü—Ä–∏–∑—ã –∑–∞ –º–µ—Å—Ç–∞
            const rewards = [100, 75, 50, 25, 15];
            const places = ['ü•á', 'ü•à', 'ü•â', 'üèÖ', 'üéñ'];
            const placeNames = ['1 –º–µ—Å—Ç–æ', '2 –º–µ—Å—Ç–æ', '3 –º–µ—Å—Ç–æ', '4 –º–µ—Å—Ç–æ', '5 –º–µ—Å—Ç–æ'];

            let adminMessage = `üèÜ –ï–ñ–ï–ù–ï–î–ï–õ–¨–ù–´–ï –ù–ê–ì–†–ê–î–´ –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–´!\n\nüìÖ ${new Date().toLocaleDateString('ru-RU')}\n\n`;
            let winnersMessage = `üéâ **–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú –ü–û–ë–ï–î–ò–¢–ï–õ–ï–ô –ù–ï–î–ï–õ–ò!**\n\n`;

            // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—ã
            for (let i = 0; i < topUsers.length; i++) {
                const user = topUsers[i];
                const reward = rewards[i];
                const place = places[i];
                const placeName = placeNames[i];

                // –ù–∞—á–∏—Å–ª—è–µ–º ÔøΩÔøΩ–∞–≥—Ä–∞–¥—É
                await this.db.run(
                    'UPDATE users SET balance = balance + ?, total_earned = total_earned + ? WHERE id = ?',
                    [reward, reward, user.id]
                );

                // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                await this.db.run(
                    'INSERT INTO transactions (user_id, type, amount, description) VALUES (?, ?, ?, ?)',
                    [user.id, 'weekly_reward', reward, `–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ - ${placeName}`]
                );

                const userName = user.username ? `@${user.username}` : user.first_name;

                adminMessage += `${place} ${placeName}: ${userName} (${user.level1_referrals} —Ä–µ—Ñ.) ‚Üí +${reward} ‚≠ê\n`;
                winnersMessage += `${place} **${placeName}** ‚Äî ${userName}\nüéÅ –ù–∞–≥—Ä–∞–¥–∞: **${reward} ‚≠ê**\nüë• –†–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${user.level1_referrals}\n\n`;

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
                try {
                    const personalMessage = `üéâ **–ü–û–ó–î–†–ê–í–õ–Ø–ï–ú!**

${place} –í—ã –∑–∞–Ω—è–ª–∏ **${placeName}** –≤ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–º —Ä–µ–π—Ç–∏–Ω–≥–µ!

üèÜ **–í–∞—à–∞ –Ω–∞–≥—Ä–∞–¥–∞: ${reward} ‚≠ê –∑–≤—ë–∑–¥**
üë• –ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: ${user.level1_referrals}

üí∞ –ù–∞–≥—Ä–∞–¥–∞ —É–∂–µ –∑–∞—á–∏—Å–ª–µ–Ω–∞ –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å!

üî• –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –¥—Ä—É–∑–µ–π –∏ –ø–æ–±–µ–∂–¥–∞–π—Ç–µ –∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é!`;

                    await this.bot.sendMessage(user.id, personalMessage, {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' },
                                    { text: 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞', callback_data: 'show_referral' }
                                ]
                            ]
                        }
                    });
                } catch (error) {
                    console.log(`Failed to send personal reward message to user ${user.id}`);
                }
            }

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É –∞–¥–º–∏–Ω—É
            await this.bot.sendMessage(this.adminId, adminMessage);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è—Ö
            winnersMessage += `\nüî• **–ù–æ–≤–∞—è –Ω–µ–¥–µ–ª—è ‚Äî –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏!**\n\nüë• –ü—Ä–∏–≥–ª–∞—à–∞–π –¥—Ä—É–∑–µ–π ÔøΩÔøΩ –øÔøΩÔøΩ–ø–∞–¥–∏ –≤ —Ç–æ–ø-5 –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ!`;

            const allUsers = await this.db.all('SELECT id FROM users');
            let sentCount = 0;
            let failCount = 0;

            for (const user of allUsers) {
                try {
                    await this.bot.sendMessage(user.id, winnersMessage, {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: [
                                [
                                    { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' },
                                    { text: 'üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞', callback_data: 'show_referral' }
                                ]
                            ]
                        }
                    });
                    sentCount++;

                    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
                    if (sentCount % 20 === 0) {
                        await new Promise(resolve => setTimeout(resolve, 1000));
                    }
                } catch (error) {
                    failCount++;
                }
            }

            console.log(`‚úÖ Weekly rewards distributed! Sent to ${sentCount} users, failed: ${failCount}`);
            await this.bot.sendMessage(this.adminId, `üìä –†–∞—Å—Å—ã–ª–∫–∞ –æ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n‚úÖ –î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${sentCount}\n‚ùå –ù–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: ${failCount}`);

        } catch (error) {
            console.error('Error distributing weekly rewards:', error);
            await this.bot.sendMessage(this.adminId, `‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥: ${error.message}`);
        }
    }

    // –†—É—á–Ω–æ–π –∑–∞–ø—É—Å–∫ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    async manualDistributeRewards(chatId, userId) {
        if (userId !== this.adminId) {
            await this.bot.sendMessage(chatId, '‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞');
            return;
        }

        await this.bot.sendMessage(chatId, 'üèÜ –ó–∞–ø—É—Å–∫–∞—é —Ä—É—á–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã—Ö –Ω–∞–≥—Ä–∞–¥...');
        await this.distributeWeeklyRewards();
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è
    async getNextRewardTime(chatId, userId) {
        if (userId !== this.adminId) return;

        const now = new Date();
        const nextSunday = new Date();
        
        // –ù–∞—Ö–æ–¥–∏–º —Å–ª–µ–¥—É—é—â–µ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ
        const daysUntilSunday = (7 - now.getDay()) % 7 || 7;
        nextSunday.setDate(now.getDate() + daysUntilSunday);
        nextSunday.setHours(20, 0, 0, 0);

        // –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –∏ –≤—Ä–µ–º—è –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–æ
        if (now.getDay() === 0 && now.getHours() < 20) {
            nextSunday.setDate(now.getDate());
        }

        const timeLeft = nextSunday - now;
        const daysLeft = Math.floor(timeLeft / (1000 * 60 * 60 * 24));
        const hoursLeft = Math.floor((timeLeft % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));

        await this.bot.sendMessage(chatId, `‚è∞ –°–ª–µ–¥—É—é—â–µ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –Ω–∞–≥—Ä–∞–¥:\nüìÖ ${nextSunday.toLocaleString('ru-RU')}\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: ${daysLeft} –¥–Ω–µ–π ${hoursLeft} —á–∞—Å–æ–≤`);
    }
}

module.exports = WeeklyRewardsController;
