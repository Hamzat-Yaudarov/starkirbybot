const SafeMessageHelper = require('../utils/safeMessageHelper');
const InstanceCoordinator = require('../utils/instanceCoordinator');

class PetController {
    constructor(database, bot) {
        this.db = database;
        this.bot = bot;
        this.coordinator = null; // Will be initialized later
    }

    // Initialize coordinator after database is ready
    async initCoordinator() {
        if (!this.coordinator) {
            this.coordinator = new InstanceCoordinator(this.db);
            await this.coordinator.init();
        }
    }

    // Show pets menu
    async showPets(chatId, userId, messageId = null) {
        try {
            const user = await this.db.get('SELECT * FROM users WHERE id = ?', [userId]);
            if (!user) {
                const errorMsg = '‚ùå –ü–æÔøΩÔøΩ—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω';
                if (messageId) {
                    await SafeMessageHelper.safeEditMessage(this.bot,errorMsg, {
                        chat_id: chatId,
                        message_id: messageId
                    });
                } else {
                    await this.bot.sendMessage(chatId, errorMsg);
                }
                return;
            }

            // Get user's pets
            const userPets = await this.db.all(`
                SELECT up.id, up.level, p.name, p.description, p.boost_multiplier, p.base_price, p.max_level
                FROM user_pets up
                JOIN pets p ON up.pet_id = p.id
                WHERE up.user_id = ?
                ORDER BY up.id ASC
            `, [userId]);

            // Calculate total boost (additive system)
            let totalBoost = 0;
            userPets.forEach(pet => {
                totalBoost += pet.boost_multiplier * pet.level;
            });

            const boostPercent = (totalBoost * 100).toFixed(1);

            let message = `üêæ –í–∞—à–∏ –ø–∏—Ç–æ–º—Ü—ã:

üí∞ –ë–∞–ª–∞–Ω—Å: ${user.balance.toFixed(2)} ‚≠ê
üìà –û–±—â–∏–π –±—É—Å—Ç: +${boostPercent}%

`;

            if (userPets.length === 0) {
                message += `üòî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤

üéØ –ü–∏—Ç–æ–º—Ü—ã —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –≤–∞—à –¥–æ—Ö–æ–¥ –æ—Ç:
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∫–ª–∏–∫–æÔøΩÔøΩ
‚Ä¢ –ù–∞–≥—Ä–∞–¥ –∑–∞ –∑–∞–¥–∞–Ω–∏—è
‚Ä¢ –î—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–æ—Ö–æ–¥–∞

üí° –ö—É–ø–∏—Ç–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!`;
            } else {
                message += `üë• –í–∞—à–∏ –ø–∏—Ç–æ–º—Ü—ã:

`;
                userPets.forEach((pet, index) => {
                    const levelBoost = pet.boost_multiplier * pet.level;
                    const petBoostPercent = (levelBoost * 100).toFixed(1);
                    
                    message += `${index + 1}. ${pet.name} (–£—Ä.${pet.level}/${pet.max_level})
   üìà –ë—É—Å—Ç: +${petBoostPercent}%
   üìù ${pet.description}

`;
                });
            }

            const keyboard = [
                [{ text: 'üõí –ö—É–ø–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞', callback_data: 'pet_shop' }]
            ];

            if (userPets.length > 0) {
                keyboard.push([{ text: '‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –ø–∏—Ç–æ–º—Ü–µ–≤', callback_data: 'pet_upgrade' }]);
            }

            keyboard.push([{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]);

            if (messageId) {
                await SafeMessageHelper.safeEditMessage(this.bot,message, {
                    chat_id: chatId,
                    message_id: messageId,
                    reply_markup: {
                        inline_keyboard: keyboard
                    }
                });
            } else {
                await this.bot.sendMessage(chatId, message, {
                    reply_markup: {
                        inline_keyboard: keyboard
                    }
                });
            }

        } catch (error) {
            console.error('Error showing pets:', error);
            if (messageId) {
                try {
                    await SafeMessageHelper.safeEditMessage(this.bot,'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∏—Ç–æ–º—Ü–µ–≤', {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: {
                            inline_keyboard: [[
                                { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
                            ]]
                        }
                    });
                } catch (editError) {
                    await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∏—Ç–æ–º—Ü–µ–≤');
                }
            } else {
                await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∏—Ç–æ–º—Ü–µ–≤');
            }
        }
    }

    // Show pet shop
    async showPetShop(chatId, userId, messageId = null) {
        try {
            const user = await this.db.get('SELECT balance FROM users WHERE id = ?', [userId]);
            const availablePets = await this.db.all(`
                SELECT p.* FROM pets p
                WHERE p.id NOT IN (
                    SELECT pet_id FROM user_pets WHERE user_id = ?
                )
                ORDER BY p.base_price ASC
            `, [userId]);

            if (availablePets.length === 0) {
                const noPetsMessage = `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!

–í—ã –∫—É–ø–∏–ª–∏ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤!
–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Ç–æ–ª—å–∫–æ —É–ª—É—á—à–∞—Ç—å –∏—Ö —É—Ä–æ–≤–Ω–∏.`;

                const noPetsKeyboard = [
                    [{ text: '‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –ø–∏—Ç–æ–º—Ü–µ–≤', callback_data: 'pet_upgrade' }],
                    [{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø–∏—Ç–æ–º—Ü–∞–º', callback_data: 'pet_back' }]
                ];

                if (messageId) {
                    await SafeMessageHelper.safeEditMessage(this.bot,noPetsMessage, {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: {
                            inline_keyboard: noPetsKeyboard
                        }
                    });
                } else {
                    await this.bot.sendMessage(chatId, noPetsMessage, {
                        reply_markup: {
                            inline_keyboard: noPetsKeyboard
                        }
                    });
                }
                return;
            }

            let message = `üõí –ú–∞–≥–∞–∑–∏–Ω –ø–∏—Ç–æ–º—Ü–µ–≤:

üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance.toFixed(2)} ‚≠ê

üêæ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∏—Ç–æ–º—Ü—ã:

`;

            const keyboard = [];
            
            // Limit to first 3 pets to avoid message being too long
            const displayPets = availablePets.slice(0, 3);
            displayPets.forEach((pet, index) => {
                const boostPercent = (pet.boost_multiplier * 100).toFixed(1);
                // Limit description length
                const shortDescription = pet.description.length > 30 ? 
                    pet.description.substring(0, 30) + '...' : pet.description;
                
                message += `${index + 1}. ${pet.name} - ${pet.base_price} ‚≠ê
   üìà –ë—É—Å—Ç: +${boostPercent}%
   üìù ${shortDescription}

`;
                
                const canAfford = user.balance >= pet.base_price;
                const buttonText = canAfford ? 
                    `üí∞ ${pet.name} (${pet.base_price} ‚≠ê)` : 
                    `‚ùå ${pet.name} (${pet.base_price} ‚≠ê)`;
                
                keyboard.push([{
                    text: buttonText,
                    callback_data: canAfford ? `pet_buy_${pet.id}` : 'pet_cant_afford'
                }]);
            });

            keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø–∏—Ç–æ–º—Ü–∞–º', callback_data: 'pet_back' }]);

            if (messageId) {
                await SafeMessageHelper.safeEditMessage(this.bot,message, {
                    chat_id: chatId,
                    message_id: messageId,
                    reply_markup: {
                        inline_keyboard: keyboard
                    }
                });
            } else {
                await this.bot.sendMessage(chatId, message, {
                    reply_markup: {
                        inline_keyboard: keyboard
                    }
                });
            }

        } catch (error) {
            console.error('Error showing pet shop:', error);
            if (messageId) {
                try {
                    await SafeMessageHelper.safeEditMessage(this.bot,'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑ÔøΩÔøΩ–µ –º–∞–≥–∞–∑–∏–Ω–∞', {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: {
                            inline_keyboard: [[
                                { text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø–∏—Ç–æ–º—Ü–∞–º', callback_data: 'pet_back' }
                            ]]
                        }
                    });
                } catch (editError) {
                    await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞–≥–∞–∑–∏–Ω–∞');
                }
            } else {
                await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥ÔøΩÔøΩ—É–∑–∫–µ –º–∞–≥–∞–∑–∏–Ω–∞');
            }
        }
    }

    // Show pet upgrade menu
    async showPetUpgrade(chatId, userId, messageId = null) {
        try {
            const user = await this.db.get('SELECT balance FROM users WHERE id = ?', [userId]);
            const userPets = await this.db.all(`
                SELECT up.id, up.level, p.name, p.boost_multiplier, p.base_price, p.max_level
                FROM user_pets up
                JOIN pets p ON up.pet_id = p.id
                WHERE up.user_id = ?
                ORDER BY up.id ASC
            `, [userId]);

            if (userPets.length === 0) {
                const noPetsMessage = `üòî –£ –≤–∞—Å –Ω–µÔøΩÔøΩ –ø–∏—Ç–æ–º—Ü–µ–≤ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è

üõí –°–Ω–∞—á–∞–ª–∞ –∫—É–ø–∏—Ç–µ –ø–∏—Ç–æ–º—Ü–∞ –≤ –ºÔøΩÔøΩ–≥–∞–∑–∏–Ω–µ!`;

                const noPetsKeyboard = [[
                    { text: 'üõí –ö—É–ø–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞', callback_data: 'pet_shop' }
                ], [
                    { text: 'ÔøΩÔøΩÔøΩÔøΩ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
                ]];

                if (messageId) {
                    await SafeMessageHelper.safeEditMessage(this.bot,noPetsMessage, {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: {
                            inline_keyboard: noPetsKeyboard
                        }
                    });
                } else {
                    await this.bot.sendMessage(chatId, noPetsMessage, {
                        reply_markup: {
                            inline_keyboard: noPetsKeyboard
                        }
                    });
                }
                return;
            }

            let message = `‚¨ÜÔ∏è –£–ª—É—á—à–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–µ–≤:

üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance.toFixed(2)} ‚≠ê

üêæ –í–∞—à–∏ –øÔøΩÔøΩ—Ç–æ–º—Ü—ã:

`;

            const keyboard = [];

            userPets.forEach((pet, index) => {
                const upgradeCost = this.calculateUpgradeCost(pet.base_price, pet.level);
                const currentBoost = (pet.boost_multiplier * pet.level * 100).toFixed(1);
                const nextBoost = (pet.boost_multiplier * (pet.level + 1) * 100).toFixed(1);
                
                message += `${index + 1}. ${pet.name} (–£—Ä.${pet.level}/${pet.max_level})
   üìà –ë—É—Å—Ç: +${currentBoost}% ‚Üí +${nextBoost}%
   üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —É–ª—É—á—à–µ–Ω–∏—è: ${upgradeCost} ‚≠ê

`;

                if (pet.level < pet.max_level) {
                    const canAfford = user.balance >= upgradeCost;
                    const buttonText = canAfford ?
                        `‚¨ÜÔ∏è ${pet.name} –¥–æ —É—Ä.${pet.level + 1} (${upgradeCost} ‚≠ê)` :
                        `‚ùå ${pet.name} (${upgradeCost} ÔøΩÔøΩ)`;
                    
                    keyboard.push([{ 
                        text: buttonText, 
                        callback_data: canAfford ? `pet_upgrade_${pet.id}` : 'pet_cant_afford'
                    }]);
                } else {
                    keyboard.push([{ 
                        text: `‚úÖ ${pet.name} (–ú–ê–ö–°)`, 
                        callback_data: 'pet_max_level'
                    }]);
                }
            });

            keyboard.push([{ text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø–∏—Ç–æ–º—Ü–∞–º', callback_data: 'pet_back' }]);

            if (messageId) {
                await SafeMessageHelper.safeEditMessage(this.bot,message, {
                    chat_id: chatId,
                    message_id: messageId,
                    reply_markup: {
                        inline_keyboard: keyboard
                    }
                });
            } else {
                await this.bot.sendMessage(chatId, message, {
                    reply_markup: {
                        inline_keyboard: keyboard
                    }
                });
            }

        } catch (error) {
            console.error('Error showing pet upgrade:', error);
            if (messageId) {
                try {
                    await SafeMessageHelper.safeEditMessage(this.bot,'‚ùå –û—à–∏–±–∫–∞ –øÔøΩÔøΩ–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–ª—É—á—à–µ–Ω–∏–π', {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: {
                            inline_keyboard: [[
                                { text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø–∏—Ç–æ–º—Ü–∞–º', callback_data: 'pet_back' }
                            ]]
                        }
                    });
                } catch (editError) {
                    await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–ª—É—á—à–µ–Ω–∏–π');
                }
            } else {
                await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —É–ª—É—á—à–µ–Ω–∏–π');
            }
        }
    }

    // Calculate upgrade cost
    calculateUpgradeCost(basePrice, currentLevel) {
        // Cost increases by 50% each level
        return Math.round(basePrice * Math.pow(1.5, currentLevel) * 100) / 100;
    }

    // Handle pet callbacks
    async handlePetCallback(callbackQuery) {
        const msg = callbackQuery.message;
        const data = callbackQuery.data;
        const chatId = msg.chat.id;
        const userId = callbackQuery.from.id;

        try {
            if (data === 'pet_shop') {
                await this.showPetShop(chatId, userId, msg.message_id);
            } else if (data === 'pet_upgrade') {
                await this.showPetUpgrade(chatId, userId, msg.message_id);
            } else if (data === 'pet_back') {
                await this.showPets(chatId, userId, msg.message_id);
            } else if (data.startsWith('pet_buy_')) {
                const petId = parseInt(data.split('_')[2]);
                await this.buyPet(chatId, userId, petId, msg.message_id);
            } else if (data.startsWith('pet_upgrade_')) {
                const userPetId = parseInt(data.split('_')[2]);
                await this.upgradePet(chatId, userId, userPetId, msg.message_id);
            } else if (data === 'pet_cant_afford') {
                await this.bot.answerCallbackQuery(callbackQuery.id, '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—áÔøΩÔøΩ–æ –∑–≤—ë–∑–¥!', true);
            } else if (data === 'pet_max_level') {
                await this.bot.answerCallbackQuery(callbackQuery.id, '‚úÖ –ü–∏—Ç–æ–º–µ—Ü —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è!', true);
            }
        } catch (error) {
            console.error('Error handling pet callback:', error);
            try {
                await SafeMessageHelper.safeEditMessage(this.bot,'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è', {
                    chat_id: chatId,
                    message_id: msg.message_id,
                    reply_markup: {
                        inline_keyboard: [[
                            { text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø–∏—Ç–æ–º—Ü–∞–º', callback_data: 'pet_back' }
                        ]]
                    }
                });
            } catch (editError) {
                await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–µ–π—Å—Ç–≤–∏—è');
            }
        }
    }

    // Buy a pet
    async buyPet(chatId, userId, petId, messageId = null) {
        const lockKey = `pet_buy_${userId}_${petId}`;

        try {
            // Ensure coordinator is initialized
            if (!this.coordinator) {
                await this.initCoordinator();
            }

            // Use database transaction to ensure data consistency
            const result = await this.coordinator.lockedTransaction(lockKey, async () => {
                // Get data for validation (coordinator ensures consistency)
                const user = await this.db.get('SELECT balance FROM users WHERE id = ?', [userId]);
                const pet = await this.db.get('SELECT * FROM pets WHERE id = ?', [petId]);
                const existingPet = await this.db.get('SELECT id FROM user_pets WHERE user_id = ? AND pet_id = ?', [userId, petId]);

                if (!user || !pet) {
                    throw new Error('USER_OR_PET_NOT_FOUND');
                }

                if (existingPet) {
                    throw new Error('PET_ALREADY_OWNED');
                }

                if (user.balance < pet.base_price) {
                    throw new Error('INSUFFICIENT_BALANCE');
                }

                console.log(`üí≥ Before purchase: User ${userId} balance = ${user.balance}, pet cost = ${pet.base_price}`);

                // Execute purchase operations (coordinator already provides transaction safety)
                await this.db.run('UPDATE users SET balance = balance - ? WHERE id = ?', [pet.base_price, userId]);

                const insertResult = await this.db.run('INSERT INTO user_pets (user_id, pet_id) VALUES (?, ?)', [userId, petId]);

                await this.db.run('INSERT INTO transactions (user_id, type, amount, description) VALUES (?, ?, ?, ?)', [userId, 'pet', -pet.base_price, `–ü–æ–∫—É–ø–∫–∞ –ø–∏—Ç–æ–º—Ü–∞: ${pet.name}`]);

                const updatedUser = await this.db.get('SELECT balance FROM users WHERE id = ?', [userId]);

                console.log(`‚úÖ Pet purchased successfully: User ${userId} bought pet ${petId} (${pet.name}) for ${pet.base_price} stars`);
                console.log(`üí∞ Transaction verified: Previous balance: ${user.balance}, Cost: ${pet.base_price}, Final balance: ${updatedUser.balance}`);

                return {
                    success: true,
                    pet,
                    remainingBalance: updatedUser.balance,
                    userPetId: insertResult.id
                };
            });

            const boostPercent = (result.pet.boost_multiplier * 100).toFixed(1);
            const successMsg = `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!

üêæ –í—ã –∫—É–ø–∏–ª–∏: ${result.pet.name}
üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${result.pet.base_price} ‚≠ê
üíé –û—Å—Ç–∞—Ç–æ–∫: ${result.remainingBalance.toFixed(2)} ‚≠ê

üìà –í–∞—à –ø–∏—Ç–æ–º–µ—Ü –¥–∞—ë—Ç –±—É—Å—Ç +${boostPercent}% –∫ –¥–æ—Ö–æ–¥—É!
‚¨ÜÔ∏è –£–ª—É—á—à–∞–π—Ç–µ –ø–∏—Ç–æ–º—Ü–∞, —á—Ç–æ–±—ã —É–≤–µ–ª–∏—á–∏—Ç—å –±—É—Å—Ç!`;

            if (messageId) {
                await SafeMessageHelper.safeEditMessage(this.bot, successMsg, {
                    chat_id: chatId,
                    message_id: messageId,
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚¨ÜÔ∏è –£–ª—É—áÔøΩÔøΩ–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞', callback_data: 'pet_upgrade' }],
                            [{ text: 'üêæ –ú–æ–∏ –ø–∏—Ç–æ–º—Ü—ã', callback_data: 'pet_back' }]
                        ]
                    }
                });
            } else {
                await this.bot.sendMessage(chatId, successMsg, {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞', callback_data: 'pet_upgrade' }],
                            [{ text: 'üêæ –ú–æÔøΩÔøΩ –ø–∏—Ç–æ–º—Ü—ã', callback_data: 'pet_back' }]
                        ]
                    }
                });
            }

        } catch (error) {
            console.error('Error buying pet:', error);

            let errorMsg = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–∏—Ç–æ–º—Ü–∞';
            let backButton = 'pet_back';

            if (error.message === 'USER_OR_PET_NOT_FOUND') {
                errorMsg = '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ –ø–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω';
            } else if (error.message === 'PET_ALREADY_OWNED') {
                errorMsg = '‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç –ø–∏—Ç–æ–º–µ—Ü!';
                backButton = 'pet_shop';
            } else if (error.message === 'INSUFFICIENT_BALANCE') {
                errorMsg = '‚ùå –ù–µ–¥–æ—Å—Ç–∞ÔøΩÔøΩ–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏!';
                backButton = 'pet_shop';
            }

            if (messageId) {
                try {
                    await SafeMessageHelper.safeEditMessage(this.bot, errorMsg, {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: {
                            inline_keyboard: [[
                                { text: 'üîô –ù–∞–∑–∞–¥', callback_data: backButton }
                            ]]
                        }
                    });
                } catch (editError) {
                    await this.bot.sendMessage(chatId, errorMsg);
                }
            } else {
                await this.bot.sendMessage(chatId, errorMsg);
            }
        }
    }

    // Upgrade a pet
    async upgradePet(chatId, userId, userPetId, messageId = null) {
        try {
            const user = await this.db.get('SELECT balance FROM users WHERE id = ?', [userId]);
            const userPet = await this.db.get(`
                SELECT up.id, up.level, p.name, p.boost_multiplier, p.base_price, p.max_level
                FROM user_pets up
                JOIN pets p ON up.pet_id = p.id
                WHERE up.id = ? AND up.user_id = ?
            `, [userPetId, userId]);

            if (!user || !userPet) {
                const errorMsg = '‚ùå –ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω';
                if (messageId) {
                    await SafeMessageHelper.safeEditMessage(this.bot,errorMsg, {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: {
                            inline_keyboard: [[
                                { text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø–∏—Ç–æ–º—Ü–∞–º', callback_data: 'pet_back' }
                            ]]
                        }
                    });
                } else {
                    await this.bot.sendMessage(chatId, errorMsg);
                }
                return;
            }

            if (userPet.level >= userPet.max_level) {
                const errorMsg = '‚ùå –ü–∏—Ç–æ–º–µ—Ü —É–∂–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è!';
                if (messageId) {
                    await SafeMessageHelper.safeEditMessage(this.bot,errorMsg, {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: {
                            inline_keyboard: [[
                                { text: 'üîô –ù–∞–∑–∞–¥ –∫ —É–ª—É—á—à–µ–Ω–∏—è–º', callback_data: 'pet_upgrade' }
                            ]]
                        }
                    });
                } else {
                    await this.bot.sendMessage(chatId, errorMsg);
                }
                return;
            }

            const upgradeCost = this.calculateUpgradeCost(userPet.base_price, userPet.level);

            if (user.balance < upgradeCost) {
                const errorMsg = '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è!';
                if (messageId) {
                    await SafeMessageHelper.safeEditMessage(this.bot,errorMsg, {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: {
                            inline_keyboard: [[
                                { text: 'üîô –ù–∞–∑–∞–¥ –∫ —É–ª—É—á—à–µ–Ω–∏—è–º', callback_data: 'pet_upgrade' }
                            ]]
                        }
                    });
                } else {
                    await this.bot.sendMessage(chatId, errorMsg);
                }
                return;
            }

            // Upgrade pet operations
            await this.db.run('UPDATE users SET balance = balance - ? WHERE id = ?', [upgradeCost, userId]);
            await this.db.run('UPDATE user_pets SET level = level + 1 WHERE id = ?', [userPetId]);
            await this.db.run('INSERT INTO transactions (user_id, type, amount, description) VALUES (?, ?, ?, ?)', [userId, 'pet', -upgradeCost, `–£–ª—É—á—à–µ–Ω–∏–µ ${userPet.name} –¥–æ —É—Ä.${userPet.level + 1}`]);

            const newLevel = userPet.level + 1;
            const newBoost = (userPet.boost_multiplier * newLevel * 100).toFixed(1);
            const successMsg = `‚¨ÜÔ∏è –ü–∏—Ç–æ–º–µ—Ü —É–ª—É—á—à–µ–Ω!

üêæ ${userPet.name} —Ç–µ–ø–µ—Ä—å ${newLevel} —É—Ä–æ–≤–Ω—è!
üí∞ –ü–æ—Ç—Ä–∞—áÔøΩÔøΩ–Ω–æ: ${upgradeCost} ‚≠ê
üíé –û—Å—Ç–∞—Ç–æ–∫: ${(user.balance - upgradeCost).toFixed(2)} ‚≠ê

üìà –ù–æ–≤—ã–π –±—É—Å—Ç: +${newBoost}%
‚ú® –í–∞—à –¥–æ—Ö–æ–¥ —É–≤–µ–ª–∏—á–∏–ª—Å—è!`;

            if (messageId) {
                await SafeMessageHelper.safeEditMessage(this.bot,successMsg, {
                    chat_id: chatId,
                    message_id: messageId,
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –µ—â—ë', callback_data: 'pet_upgrade' }],
                            [{ text: 'üêæ –ú–æ–∏ –ø–∏—Ç–æ–º—Ü—ã', callback_data: 'pet_back' }]
                        ]
                    }
                });
            } else {
                await this.bot.sendMessage(chatId, successMsg, {
                    reply_markup: {
                        inline_keyboard: [
                            [{ text: '‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –µ—â—ë', callback_data: 'pet_upgrade' }],
                            [{ text: 'üêæ –ú–æ–∏ –ø–∏—Ç–æ–º—Ü—ã', callback_data: 'pet_back' }]
                        ]
                    }
                });
            }

        } catch (error) {
            console.error('Error upgrading pet:', error);
            const errorMsg = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –ø–∏—Ç–æ–º—Ü–∞';
            if (messageId) {
                try {
                    await SafeMessageHelper.safeEditMessage(this.bot,errorMsg, {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: {
                            inline_keyboard: [[
                                { text: 'üîô –ù–∞–∑–∞–¥ –∫ –ø–∏—Ç–æ–º—Ü–∞–º', callback_data: 'pet_back' }
                            ]]
                        }
                    });
                } catch (editError) {
                    await this.bot.sendMessage(chatId, errorMsg);
                }
            } else {
                await this.bot.sendMessage(chatId, errorMsg);
            }
        }
    }

    // Get user's total pet boost
    async getUserPetBoost(userId) {
        try {
            const userPets = await this.db.all(`
                SELECT p.boost_multiplier, up.level 
                FROM user_pets up 
                JOIN pets p ON up.pet_id = p.id 
                WHERE up.user_id = ?
            `, [userId]);

            let totalBoost = 0;
            userPets.forEach(pet => {
                totalBoost += pet.boost_multiplier * pet.level;
            });

            return totalBoost;
        } catch (error) {
            console.error('Error getting user pet boost:', error);
            return 1;
        }
    }
}

module.exports = PetController;
