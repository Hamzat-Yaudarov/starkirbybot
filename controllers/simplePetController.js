const SafeMessageHelper = require('../utils/safeMessageHelper');

class SimplePetController {
    constructor(database, bot) {
        this.db = database;
        this.bot = bot;
    }

    // –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    log(message, data = null) {
        const timestamp = new Date().toISOString();
        console.log(`[${timestamp}] PET: ${message}`, data ? JSON.stringify(data) : '');
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –ø–∏—Ç–æ–º—Ü–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async showPets(chatId, userId, messageId = null) {
        try {
            this.log('–ü–æ–∫–∞–∑ –ø–∏—Ç–æ–º—Ü–µ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', { userId });

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await this.db.get('SELECT * FROM users WHERE id = ?', [userId]);
            if (!user) {
                this.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', { userId });
                const errorMsg = '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω';
                if (messageId) {
                    await SafeMessageHelper.safeEditMessage(this.bot, errorMsg, {
                        chat_id: chatId,
                        message_id: messageId
                    });
                } else {
                    await this.bot.sendMessage(chatId, errorMsg);
                }
                return;
            }

            this.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã', { balance: user.balance, id: user.id });

            // –ü–æ–ª—É—á–∞–µ–º –ø–∏—Ç–æ–º—Ü–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ü–†–û–°–¢–û–ô –ó–ê–ü–†–û–°
            const userPets = await this.db.all(`
                SELECT up.id as user_pet_id, up.level, p.name, p.description, p.boost_multiplier, p.base_price, p.max_level, p.boost_type
                FROM user_pets up
                JOIN pets p ON up.pet_id = p.id
                WHERE up.user_id = ?
                ORDER BY up.id ASC
            `, [userId]);

            this.log('–ü–∏—Ç–æ–º—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã', { count: userPets.length, pets: userPets });

            // –°—á–∏—Ç–∞–µ–º –æ–±—â–∏–π –±—É—Å—Ç
            let totalBoost = 0;
            userPets.forEach(pet => {
                totalBoost += pet.boost_multiplier * pet.level;
            });

            const boostPercent = (totalBoost * 100).toFixed(1);

            let message = `üêæ –í–∞—à–∏ –ø–∏—Ç–æ–º—Ü—ã:

üí∞ –ë–∞–ª–∞–Ω—Å: ${user.balance.toFixed(2)} ‚≠ê
üìà –û–±—â–∏–π –±—É—Å—Ç: +${boostPercent}%

`;

            if (userPets.length === 0) {
                message += `üòî –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤

üéØ –ü–∏—Ç–æ–º—Ü—ã —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç –≤–∞—à –¥–æ—Ö–æ–¥ –æ—Ç:
‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∫–ª–∏–∫–æ–≤
‚Ä¢ –ù–∞–≥—Ä–∞–¥ –∑–∞ –∑–∞–¥–∞–Ω–∏—è
‚Ä¢ –î—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–æ—Ö–æ–¥–∞

üí° –ö—É–ø–∏—Ç–µ —Å–≤–æ–µ–≥–æ –ø–µ—Ä–≤–æ–≥–æ –ø–∏—Ç–æ–º—Ü–∞!`;
            } else {
                message += `üë• –í–∞—à–∏ –ø–∏—Ç–æ–º—Ü—ã:

`;
                userPets.forEach((pet, index) => {
                    const levelBoost = pet.boost_multiplier * pet.level;
                    const petBoostPercent = (levelBoost * 100).toFixed(1);
                    
                    message += `${index + 1}. ${pet.name} (–£—Ä.${pet.level}/${pet.max_level})
   üìà –ë—É—Å—Ç: +${petBoostPercent}% (${pet.boost_type})
   üìù ${pet.description}

`;
                });
            }

            const keyboard = [
                [{ text: 'üõí –ö—É–ø–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞', callback_data: 'simple_pet_shop' }]
            ];

            if (userPets.length > 0) {
                keyboard.push([{ text: '‚¨ÜÔ∏è –£–ª—É—á—à–∏—Ç—å –ø–∏—Ç–æ–º—Ü–µ–≤', callback_data: 'simple_pet_upgrade' }]);
            }

            keyboard.push([{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]);

            if (messageId) {
                await SafeMessageHelper.safeEditMessage(this.bot, message, {
                    chat_id: chatId,
                    message_id: messageId,
                    reply_markup: {
                        inline_keyboard: keyboard
                    }
                });
            } else {
                await this.bot.sendMessage(chatId, message, {
                    reply_markup: {
                        inline_keyboard: keyboard
                    }
                });
            }

        } catch (error) {
            this.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø–∏—Ç–æ–º—Ü–µ–≤', { error: error.message, userId });
            console.error('Error showing pets:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–∏—Ç–æ–º—Ü–µ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }

    // –ü–æ–∫–∞–∑–∞—Ç—å –º–∞–≥–∞–∑–∏–Ω –ø–∏—Ç–æ–º—Ü–µ–≤
    async showPetShop(chatId, userId, messageId = null) {
        try {
            this.log('–ü–æ–∫–∞–∑ –º–∞–≥–∞–∑–∏–Ω–∞ –ø–∏—Ç–æ–º—Ü–µ–≤', { userId });

            const user = await this.db.get('SELECT balance FROM users WHERE id = ?', [userId]);
            if (!user) {
                await this.bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤ (—É–±–∏—Ä–∞–µ–º is_active –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            const availablePets = await this.db.all('SELECT * FROM pets ORDER BY base_price ASC');
            
            // –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø–∏—Ç–æ–º—Ü–µ–≤
            const ownedPetIds = await this.db.all('SELECT pet_id FROM user_pets WHERE user_id = ?', [userId]);
            const ownedIds = ownedPetIds.map(p => p.pet_id);

            this.log('–î–∞–Ω–Ω—ã–µ –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ–ª—É—á–µ–Ω—ã', { 
                userBalance: user.balance, 
                availablePets: availablePets.length,
                ownedPets: ownedIds.length 
            });

            let message = `üõí **–ú–∞–≥–∞–∑–∏–Ω –ø–∏—Ç–æ–º—Ü–µ–≤**

üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance.toFixed(2)} ‚≠ê

üêæ **–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∏—Ç–æ–º—Ü—ã:**

`;

            const keyboard = [];
            let petCount = 0;

            availablePets.forEach(pet => {
                const isOwned = ownedIds.includes(pet.id);
                const canAfford = user.balance >= pet.base_price;
                
                let status = '';
                if (isOwned) {
                    status = ' ‚úÖ –ö–£–ü–õ–ï–ù';
                } else if (!canAfford) {
                    status = ' üí∏ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥';
                }

                message += `${++petCount}. **${pet.name}** - ${pet.base_price} ‚≠ê${status}
   üìà –ë—É—Å—Ç: +${(pet.boost_multiplier * 100).toFixed(1)}% (${pet.boost_type})
   üìù ${pet.description}

`;

                // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–∏—Ç–æ–º–µ—Ü –Ω–µ –∫—É–ø–ª–µ–Ω –∏ –µ—Å—Ç—å –¥–µ–Ω—å–≥–∏
                if (!isOwned && canAfford) {
                    keyboard.push([{
                        text: `üõí –ö—É–ø–∏—Ç—å ${pet.name} (${pet.base_price} ‚≠ê)`,
                        callback_data: `simple_buy_pet_${pet.id}`
                    }]);
                }
            });

            keyboard.push([{ text: 'üêæ –ú–æ–∏ –ø–∏—Ç–æ–º—Ü—ã', callback_data: 'simple_my_pets' }]);
            keyboard.push([{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]);

            if (messageId) {
                await SafeMessageHelper.safeEditMessage(this.bot, message, {
                    chat_id: chatId,
                    message_id: messageId,
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: keyboard
                    }
                });
            } else {
                await this.bot.sendMessage(chatId, message, {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: keyboard
                    }
                });
            }

        } catch (error) {
            this.log('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–∞–≥–∞–∑–∏–Ω–∞', { error: error.message, userId });
            console.error('Error showing pet shop:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–∞–≥–∞–∑–∏–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }

    // –ü–†–û–°–¢–ê–Ø –ø–æ–∫—É–ø–∫–∞ –ø–∏—Ç–æ–º—Ü–∞ - –ë–ï–ó –ö–û–û–†–î–ò–ù–ê–¢–û–†–û–í –ò –¢–†–ê–ù–ó–ê–ö–¶–ò–ô!
    async buyPet(chatId, userId, petId, messageId = null) {
        try {
            this.log('–ù–∞—á–∞–ª–æ –ø–æ–∫—É–ø–∫–∏ –ø–∏—Ç–æ–º—Ü–∞', { userId, petId });

            // 1. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await this.db.get('SELECT * FROM users WHERE id = ?', [userId]);
            if (!user) {
                this.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ', { userId });
                await this.bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            this.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω', { userId, balance: user.balance });

            // 2. –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∏—Ç–æ–º—Ü–∞ (—É–±–∏—Ä–∞–µ–º is_active –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            const pet = await this.db.get('SELECT * FROM pets WHERE id = ?', [petId]);
            if (!pet) {
                this.log('–ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω', { petId });
                await this.bot.sendMessage(chatId, '‚ùå –ü–∏—Ç–æ–º–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            this.log('–ü–∏—Ç–æ–º–µ—Ü –Ω–∞–π–¥–µ–Ω', { petId, name: pet.name, price: pet.base_price });

            // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∏—Ç–æ–º–µ—Ü –µ—â—ë –Ω–µ –∫—É–ø–ª–µ–Ω
            const existingPet = await this.db.get('SELECT id FROM user_pets WHERE user_id = ? AND pet_id = ?', [userId, petId]);
            if (existingPet) {
                this.log('–ü–∏—Ç–æ–º–µ—Ü —É–∂–µ –∫—É–ø–ª–µ–Ω', { userId, petId });
                await this.bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —ç—Ç–æ—Ç –ø–∏—Ç–æ–º–µ—Ü');
                return;
            }

            // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
            if (user.balance < pet.base_price) {
                this.log('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤', { balance: user.balance, price: pet.base_price });
                await this.bot.sendMessage(chatId, `‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥! –ù—É–∂–Ω–æ: ${pet.base_price} ‚≠ê, —É –≤–∞—Å: ${user.balance.toFixed(2)} ‚≠ê`);
                return;
            }

            this.log('–í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º –ø–æ–∫—É–ø–∫—É');

            // 5. –ü–†–û–°–¢–´–ï –û–ü–ï–†–ê–¶–ò–ò - –æ–¥–Ω–∞ –∑–∞ –¥—Ä—É–≥–æ–π
            this.log('–û–ø–µ—Ä–∞—Ü–∏—è 1: –°–ø–∏—Å–∞–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞');
            await this.db.run('UPDATE users SET balance = balance - ? WHERE id = ?', [pet.base_price, userId]);
            
            this.log('–û–ø–µ—Ä–∞—Ü–∏—è 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–∏—Ç–æ–º—Ü–∞');
            const insertResult = await this.db.run('INSERT INTO user_pets (user_id, pet_id, level) VALUES (?, ?, ?)', [userId, petId, 1]);
            
            this.log('–û–ø–µ—Ä–∞—Ü–∏—è 3: –ó–∞–ø–∏—Å—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏');
            await this.db.run('INSERT INTO transactions (user_id, type, amount, description) VALUES (?, ?, ?, ?)', [userId, 'pet', -pet.base_price, `–ü–æ–∫—É–ø–∫–∞ –ø–∏—Ç–æ–º—Ü–∞: ${pet.name}`]);

            this.log('–í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã', { insertedPetId: insertResult.id });

            // 6. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            const updatedUser = await this.db.get('SELECT balance FROM users WHERE id = ?', [userId]);
            const newUserPet = await this.db.get('SELECT * FROM user_pets WHERE id = ?', [insertResult.id]);
            
            this.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∫—É–ø–∫–∏', { 
                oldBalance: user.balance,
                newBalance: updatedUser.balance,
                difference: user.balance - updatedUser.balance,
                expectedDifference: pet.base_price,
                petCreated: !!newUserPet
            });

            // 7. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            const successMsg = `üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –ø–æ–∫—É–ø–∫–æ–π!

üêæ –í—ã –∫—É–ø–∏–ª–∏: ${pet.name}
üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${pet.base_price} ‚≠ê
üíé –û—Å—Ç–∞—Ç–æ–∫: ${updatedUser.balance.toFixed(2)} ‚≠ê

üìà –í–∞—à –¥–æ—Ö–æ–¥ —É–≤–µ–ª–∏—á–∏–ª—Å—è –Ω–∞ ${(pet.boost_multiplier * 100).toFixed(1)}%!
‚ú® –ü–∏—Ç–æ–º–µ—Ü –Ω–∞—á–Ω—ë—Ç –ø–æ–º–æ–≥–∞—Ç—å –≤–∞–º –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å.`;

            const keyboard = [
                [{ text: 'üõí –ö—É–ø–∏—Ç—å –µ—â—ë –ø–∏—Ç–æ–º—Ü–∞', callback_data: 'simple_pet_shop' }],
                [{ text: 'üêæ –ú–æ–∏ –ø–∏—Ç–æ–º—Ü—ã', callback_data: 'simple_my_pets' }],
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
            ];

            if (messageId) {
                await SafeMessageHelper.safeEditMessage(this.bot, successMsg, {
                    chat_id: chatId,
                    message_id: messageId,
                    reply_markup: {
                        inline_keyboard: keyboard
                    }
                });
            } else {
                await this.bot.sendMessage(chatId, successMsg, {
                    reply_markup: {
                        inline_keyboard: keyboard
                    }
                });
            }

            this.log('–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

        } catch (error) {
            this.log('–û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–∏—Ç–æ–º—Ü–∞', { 
                error: error.message, 
                stack: error.stack,
                userId, 
                petId 
            });
            console.error('Error buying pet:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ø–∏—Ç–æ–º—Ü–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–æ–≤
    async handleCallback(callbackQuery) {
        const msg = callbackQuery.message;
        const data = callbackQuery.data;
        const chatId = msg.chat.id;
        const userId = callbackQuery.from.id;

        this.log('–û–±—Ä–∞–±–æ—Ç–∫–∞ callback', { data, userId });

        try {
            if (data === 'simple_my_pets') {
                await this.showPets(chatId, userId, msg.message_id);
            } else if (data === 'simple_pet_shop') {
                await this.showPetShop(chatId, userId, msg.message_id);
            } else if (data.startsWith('simple_buy_pet_')) {
                const petId = parseInt(data.split('_')[3]);
                await this.buyPet(chatId, userId, petId, msg.message_id);
            }
        } catch (error) {
            this.log('–û—à–∏–±–∫–∞ –≤ callback', { error: error.message, data });
            console.error('Error in pet callback:', error);
        }
    }
}

module.exports = SimplePetController;
