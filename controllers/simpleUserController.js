const crypto = require('crypto');
const SafeMessageHelper = require('../utils/safeMessageHelper');

class SimpleUserController {
    constructor(database, bot) {
        this.db = database;
        this.bot = bot;
    }

    // –ü—Ä–æ—Å—Ç–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    log(message, data = null) {
        const timestamp = new Date().toISOString();
        console.log(`[${timestamp}] USER: ${message}`, data ? JSON.stringify(data) : '');
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
    generateReferralCode() {
        return crypto.randomBytes(4).toString('hex').toUpperCase();
    }

    // –ü–†–û–°–¢–ê–Ø —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async registerUser(userId, username, firstName, referralCode = null) {
        try {
            this.log('–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', { userId, username, firstName, referralCode });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            const existingUser = await this.db.get('SELECT * FROM users WHERE id = ?', [userId]);
            if (existingUser) {
                this.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', { userId });
                existingUser.isNewUser = false;
                return existingUser;
            }

            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
            let userReferralCode;
            let isUnique = false;
            while (!isUnique) {
                userReferralCode = this.generateReferralCode();
                const existing = await this.db.get('SELECT id FROM users WHERE referral_code = ?', [userReferralCode]);
                if (!existing) {
                    isUnique = true;
                }
            }

            this.log('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥', { userReferralCode });

            // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            let referrerId = null;
            if (referralCode) {
                const referrer = await this.db.get('SELECT id FROM users WHERE referral_code = ?', [referralCode]);
                if (referrer) {
                    referrerId = referrer.id;
                    this.log('–ù–∞–π–¥–µ–Ω –ø—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å', { referrerId, referralCode });
                } else {
                    this.log('–ü—Ä–∏–≥–ª–∞—Å–∏–≤—à–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', { referralCode });
                }
            }

            // –ü–†–û–°–¢–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            this.log('–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ');
            await this.db.run(
                'INSERT INTO users (id, username, first_name, balance, referrer_id, referral_code, level1_referrals, level2_referrals, total_earned) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)',
                [userId, username, firstName, 0, referrerId, userReferralCode, 0, 0, 0]
            );

            this.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –≤ –±–∞–∑–µ');

            // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const newUser = await this.db.get('SELECT * FROM users WHERE id = ?', [userId]);
            newUser.isNewUser = true;
            newUser.referrer_id = referrerId; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

            this.log('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞', { 
                userId,
                hasReferrer: !!referrerId,
                userReferralCode 
            });

            return newUser;

        } catch (error) {
            this.log('–û–®–ò–ë–ö–ê –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', {
                error: error.message,
                stack: error.stack,
                userId,
                username,
                firstName,
                referralCode
            });
            console.error('Error registering user:', error);
            throw error;
        }
    }

    // –ü–†–û–°–¢–û–ï –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
    async showProfile(chatId, userId, messageId = null) {
        try {
            this.log('–ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', { userId });

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const user = await this.db.get('SELECT * FROM users WHERE id = ?', [userId]);
            if (!user) {
                this.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω', { userId });
                await this.bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            this.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã', {
                userId,
                balance: user.balance,
                total_earned: user.total_earned,
                level1_referrals: user.level1_referrals,
                level2_referrals: user.level2_referrals
            });

            // –ü–æ–ª—É—á–∞–µ–º –ø–∏—Ç–æ–º—Ü–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const userPets = await this.db.all(`
                SELECT p.name, p.boost_multiplier, p.boost_type, up.level
                FROM user_pets up
                JOIN pets p ON up.pet_id = p.id
                WHERE up.user_id = ?
                ORDER BY up.id ASC
            `, [userId]);

            this.log('–ü–∏—Ç–æ–º—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã', { count: userPets.length });

            let petsInfo = '';
            let clickBoost = 0;
            let referral1Boost = 0;
            let referral2Boost = 0;
            let taskBoost = 0;

            if (userPets.length === 0) {
                petsInfo = 'üêæ **–ü–∏—Ç–æ–º—Ü—ã:** –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç';
            } else {
                // –°—á–∏—Ç–∞–µ–º –±—É—Å—Ç—ã –ø–æ —Ç–∏–ø–∞–º
                userPets.forEach(pet => {
                    const petBoost = pet.boost_multiplier * pet.level;
                    switch(pet.boost_type) {
                        case 'click':
                            clickBoost += petBoost;
                            break;
                        case 'referral_1':
                            referral1Boost += petBoost;
                            break;
                        case 'referral_2':
                            referral2Boost += petBoost;
                            break;
                        case 'task':
                            taskBoost += petBoost;
                            break;
                    }
                });

                const petsList = userPets.map(pet => {
                    return `${pet.name} (${pet.level} —É—Ä.)`;
                }).join(', ');
                petsInfo = `üêæ **–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–∏—Ç–æ–º—Ü—ã:** ${petsList}`;
            }

            // –°–æ–∑–¥–∞—ë–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—É—Å—Ç–∞—Ö
            let boostInfo = '';
            if (clickBoost > 0 || referral1Boost > 0 || referral2Boost > 0 || taskBoost > 0) {
                boostInfo = '\nüìà **–ë—É—Å—Ç—ã –æ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤:**';
                if (clickBoost > 0) boostInfo += `\n‚Ä¢ –ö–ª–∏–∫–µ—Ä: +${clickBoost.toFixed(1)} ‚≠ê`;
                if (referral1Boost > 0) boostInfo += `\n‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—ã 1 —É—Ä.: +${referral1Boost.toFixed(1)} ‚≠ê`;
                if (referral2Boost > 0) boostInfo += `\n‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—ã 2 —É—Ä.: +${referral2Boost.toFixed(1)} ‚≠ê`;
                if (taskBoost > 0) boostInfo += `\n‚Ä¢ –ó–∞–¥–∞–Ω–∏—è: +${taskBoost.toFixed(1)} ‚≠ê`;
            }

            const profileMessage = `üë§ **–üÔøΩÔøΩ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å**

üí∞ **–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å:** ${user.balance.toFixed(2)} ‚≠ê
üíé **–û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫:** ${user.total_earned.toFixed(2)} ‚≠ê

üë• **–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–µ—Ç—å:**
‚îú –ü—Ä—è–º—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã: ${user.level1_referrals} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
‚îî –†–µ—Ñ–µ—Ä–∞–ª—ã 2-–≥–æ —É—Ä–æ–≤–Ω—è: ${user.level2_referrals} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

${petsInfo}${boostInfo}

üîó **–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:**
\`https://t.me/kirbystarsfarmbot?start=${user.referral_code}\`

üí° –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π —Å –¥—Ä—É–∑—å—è–º–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–Ω—É—Å–æ–≤!`;

            const keyboard = {
                inline_keyboard: [
                    [
                        { text: 'üëÜ –ö–ª–∏–∫–Ω—É—Ç—å', callback_data: 'simple_daily_click' },
                        { text: '‚≠ê –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π', callback_data: 'menu_referral' }
                    ],
                    [
                        { text: 'üêæ –ü–∏—Ç–æ–º—Ü—ã', callback_data: 'simple_my_pets' },
                        { text: 'üìã –ó–∞–¥–∞–Ω–∏—è', callback_data: 'menu_tasks' }
                    ],
                    [
                        { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
                    ]
                ]
            };

            if (messageId) {
                await SafeMessageHelper.safeEditMessage(this.bot, profileMessage, {
                    chat_id: chatId,
                    message_id: messageId,
                    parse_mode: 'Markdown',
                    reply_markup: keyboard
                });
            } else {
                await this.bot.sendMessage(chatId, profileMessage, {
                    parse_mode: 'Markdown',
                    reply_markup: keyboard
                });
            }

            this.log('–ü—Ä–æ—Ñ–∏–ª—å –æ—Ç–æ–±—Ä–∞–∂—ë–Ω —É—Å–ø–µ—à–Ω–æ');

        } catch (error) {
            this.log('–û–®–ò–ë–ö–ê –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –ø—Ä–æ—Ñ–∏–ª—è', {
                error: error.message,
                stack: error.stack,
                userId
            });
            console.error('Error showing profile:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }

    // –ü–†–û–°–¢–û–ô –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–ª–∏–∫
    async dailyClick(chatId, userId, messageId = null) {
        try {
            this.log('–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–ª–∏–∫', { userId });

            const user = await this.db.get('SELECT * FROM users WHERE id = ?', [userId]);
            if (!user) {
                await this.bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–ª–∏–∫–∞–ª –ª–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
            const today = new Date().toISOString().split('T')[0];
            if (user.last_click_date === today) {
                this.log('–£–∂–µ –∫–ª–∏–∫–∞–ª —Å–µ–≥–æ–¥–Ω—è', { userId, lastClick: user.last_click_date });
                await this.bot.sendMessage(chatId, '‚è∞ –í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –Ω–∞–≥—Ä–∞–¥—É –∑–∞ –∫–ª–∏–∫ —Å–µ–≥–æ–¥–Ω—è! –ü—Ä–∏—Ö–æ–¥–∏—Ç–µ –∑–∞–≤—Ç—Ä–∞.');
                return;
            }

            // –ë–∞–∑–æ–≤–∞—è –Ω–∞–≥—Ä–∞–¥–∞
            let baseReward = 0.5;

            // –°—á–∏—Ç–∞–µ–º –±—É—Å—Ç –æ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤
            const clickPets = await this.db.all(`
                SELECT p.boost_multiplier, up.level
                FROM user_pets up
                JOIN pets p ON up.pet_id = p.id
                WHERE up.user_id = ? AND p.boost_type = 'click'
            `, [userId]);

            let clickBoost = 0;
            clickPets.forEach(pet => {
                clickBoost += pet.boost_multiplier * pet.level;
            });

            const finalReward = baseReward + clickBoost;

            this.log('–†–∞—Å—á—ë—Ç –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∫–ªÔøΩÔøΩ–∫', {
                userId,
                baseReward,
                clickBoost,
                finalReward
            });

            // –ü–†–û–°–¢–´–ï –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è
            await this.db.run(
                'UPDATE users SET balance = balance + ?, total_earned = total_earned + ?, last_click_date = ? WHERE id = ?',
                [finalReward, finalReward, today, userId]
            );

            await this.db.run(
                'INSERT INTO transactions (user_id, type, amount, description) VALUES (?, ?, ?, ?)',
                [userId, 'click', finalReward, '–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –∫–ª–∏–∫']
            );

            this.log('–ù–∞–≥—Ä–∞–¥–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∞', { userId, finalReward });

            const boostInfo = clickBoost > 0 ? ` (–±–∞–∑–æ–≤–∞—è 0.5 + –±—É—Å—Ç +${clickBoost} –æ—Ç –ø–∏—Ç–æ–º—Ü–µ–≤)` : '';

            const successMsg = `üéâ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞ –ø–æ–ª—É—á–µ–Ω–∞!

üí∞ **–ü–æ–ª—É—á–µ–Ω–æ:** ${finalReward.toFixed(2)} ‚≠ê${boostInfo}

‚è∞ –°–ª–µ–¥—É—é—â–∏–π –∫–ª–∏–∫ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –∑–∞–≤—Ç—Ä–∞!
üêæ –ö—É–ø–∏—Ç–µ –ø–∏—Ç–æ–º—Ü–µ–≤ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã!`;

            const keyboard = [
                [{ text: 'üêæ –ö—É–ø–∏—Ç—å –ø–∏—Ç–æ–º—Ü–∞', callback_data: 'simple_pet_shop' }],
                [{ text: 'üë§ –ü—Ä–æ—Ñ–∏–ª—å', callback_data: 'simple_profile' }],
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
            ];

            if (messageId) {
                await SafeMessageHelper.safeEditMessage(this.bot, successMsg, {
                    chat_id: chatId,
                    message_id: messageId,
                    reply_markup: {
                        inline_keyboard: keyboard
                    }
                });
            } else {
                await this.bot.sendMessage(chatId, successMsg, {
                    reply_markup: {
                        inline_keyboard: keyboard
                    }
                });
            }

        } catch (error) {
            this.log('–û–®–ò–ë–ö–ê –ø—Ä–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–º –∫–ª–∏–∫–µ', {
                error: error.message,
                stack: error.stack,
                userId
            });
            console.error('Error with daily click:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }
    }
}

module.exports = SimpleUserController;
