const SafeMessageHelper = require('../utils/safeMessageHelper');

class WithdrawalController {
    constructor(database, bot, adminChatId) {
        this.db = database;
        this.bot = bot;
        this.adminChatId = adminChatId;
        this.withdrawalTypes = {
            '15': { amount: 15, description: '15 Telegram Stars' },
            '25': { amount: 25, description: '25 Telegram Stars' },
            '50': { amount: 50, description: '50 Telegram Stars' },
            '100': { amount: 100, description: '100 Telegram Stars' },
            'premium': { amount: 1300, description: 'Telegram Premium –Ω–∞ 3 –º–µ—Å—è—Ü–∞ (1300 ‚≠ê)' }
        };
    }

    // Show withdrawal menu
    async showWithdrawal(chatId, userId, messageId = null) {
        try {
            const user = await this.db.get('SELECT * FROM users WHERE id = ?', [userId]);
            if (!user) {
                await this.bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            // Check for pending withdrawals
            const pendingWithdrawal = await this.db.get(
                'SELECT * FROM withdrawals WHERE user_id = ? AND status = "pending" ORDER BY id DESC LIMIT 1',
                [userId]
            );

            if (pendingWithdrawal) {
                const withdrawalInfo = this.withdrawalTypes[pendingWithdrawal.withdrawal_type];
                const pendingMsg = `‚è≥ –£ –≤–∞—Å –µ—Å—Ç—å –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ:

üí∞ –°—É–º–º–∞: ${pendingWithdrawal.amount} ‚≠ê
üìù –¢–∏–ø: ${withdrawalInfo.description}
üìÖ –î–∞—Ç–∞ –∑–∞—è–≤–∫–∏: ${new Date(pendingWithdrawal.request_date).toLocaleString('ru-RU')}

‚è∞ –ó–∞—è–≤–∫–∞ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.
–û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ.`;

                const keyboard = [[
                    { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
                ]];

                if (messageId) {
                    await SafeMessageHelper.safeEditMessage(this.bot, pendingMsg, {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: {
                            inline_keyboard: keyboard
                        }
                    });
                } else {
                    await this.bot.sendMessage(chatId, pendingMsg, {
                        reply_markup: {
                            inline_keyboard: keyboard
                        }
                    });
                }
                return;
            }

            let message = `üí∞ –í—ã–≤–æ–¥ –∑–≤—ë–∑–¥:

üíé –í–∞—à –±–∞–ª–∞–Ω—Å: ${user.balance.toFixed(2)} ‚≠ê

üì§ –î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤—ã–≤–æ–¥–∞:

`;

            const keyboard = [];
            
            Object.entries(this.withdrawalTypes).forEach(([type, info]) => {
                const canAfford = user.balance >= info.amount;
                message += `${canAfford ? '‚úÖ' : '‚ùå'} ${info.description} - ${info.amount} ‚≠ê
`;
                
                if (canAfford) {
                    keyboard.push([{ 
                        text: `üí∞ –í—ã–≤–µ—Å—Ç–∏ ${info.description}`, 
                        callback_data: `withdraw_${type}` 
                    }]);
                } else {
                    keyboard.push([{ 
                        text: `‚ùå ${info.description} (–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ ‚≠ê)`, 
                        callback_data: `withdraw_cant_afford_${type}` 
                    }]);
                }
            });

            message += `
‚ö†Ô∏è –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:
‚Ä¢ –ó–∞—è–≤–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
‚Ä¢ –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: –¥–æ 24 —á–∞—Å–æ–≤
‚Ä¢ –ü—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–≤—ë–∑–¥—ã –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è
‚Ä¢ ÔøΩÔøΩ–æ–∂–Ω–æ –ø–æ–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –∑–∞—è–≤–∫—É –∑–∞ —Ä–∞–∑

üí° –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –±–æ–ª—å—à–µ –∑–≤—ë–∑–¥, —á—Ç–æ–±—ã –¥–µ–ª–∞—Ç—å –≤—ã–≤–æ–¥—ã!`;

            keyboard.push([{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]);

            if (messageId) {
                await this.bot.editMessageText(message, {
                    chat_id: chatId,
                    message_id: messageId,
                    reply_markup: {
                        inline_keyboard: keyboard
                    }
                });
            } else {
                await this.bot.sendMessage(chatId, message, {
                    reply_markup: {
                        inline_keyboard: keyboard
                    }
                });
            }

        } catch (error) {
            console.error('Error showing withdrawal:', error);
            const errorMsg = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤—ã–≤–æ–¥–∞';
            if (messageId) {
                try {
                    await this.bot.editMessageText(errorMsg, {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: {
                            inline_keyboard: [[
                                { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
                            ]]
                        }
                    });
                } catch (editError) {
                    await this.bot.sendMessage(chatId, errorMsg);
                }
            } else {
                await this.bot.sendMessage(chatId, errorMsg);
            }
        }
    }

    // Handle withdrawal callbacks
    async handleWithdrawalCallback(callbackQuery) {
        const msg = callbackQuery.message;
        const data = callbackQuery.data;
        const chatId = msg.chat.id;
        const userId = callbackQuery.from.id;

        try {
            if (data.startsWith('withdraw_') && !data.includes('cant_afford')) {
                const withdrawalType = data.split('_')[1];
                if (this.withdrawalTypes[withdrawalType]) {
                    await this.requestWithdrawal(chatId, userId, withdrawalType);
                }
            } else if (data.startsWith('withdraw_cant_afford_')) {
                await this.bot.answerCallbackQuery(callbackQuery.id, '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞!', true);
            }
        } catch (error) {
            console.error('Error handling withdrawal callback:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–≤–æ–¥–∞');
        }
    }

    // Request withdrawal
    async requestWithdrawal(chatId, userId, withdrawalType) {
        try {
            const user = await this.db.get('SELECT * FROM users WHERE id = ?', [userId]);
            const withdrawalInfo = this.withdrawalTypes[withdrawalType];

            if (!user || !withdrawalInfo) {
                await this.bot.sendMessage(chatId, '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ —Ç–∏–ø –≤—ã–≤–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            // Check balance
            if (user.balance < withdrawalInfo.amount) {
                await this.bot.sendMessage(chatId, '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥ –¥–ª—è –≤—ã–≤–æ–¥–∞!');
                return;
            }

            // Check for pending withdrawals
            const pendingWithdrawal = await this.db.get(
                'SELECT id FROM withdrawals WHERE user_id = ? AND status = "pending"',
                [userId]
            );

            if (pendingWithdrawal) {
                await this.bot.sendMessage(chatId, '‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞—è–≤–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ!');
                return;
            }

            // Deduct amount from balance temporarily
            await this.db.run(
                'UPDATE users SET balance = balance - ? WHERE id = ?',
                [withdrawalInfo.amount, userId]
            );

            // Create withdrawal request
            const result = await this.db.run(
                'INSERT INTO withdrawals (user_id, amount, withdrawal_type) VALUES (?, ?, ?)',
                [userId, withdrawalInfo.amount, withdrawalType]
            );

            const withdrawalId = result.id;

            // Log transaction
            await this.db.run(
                'INSERT INTO transactions (user_id, type, amount, description) VALUES (?, ?, ?, ?)',
                [userId, 'withdrawal_request', -withdrawalInfo.amount, `–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥: ${withdrawalInfo.description}`]
            );

            // Send to admin chat
            await this.sendToAdminChat(withdrawalId, user, withdrawalInfo);

            // Confirm to user
            await this.bot.sendMessage(chatId, `‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!

üí∞ –°—É–º–º–∞: ${withdrawalInfo.amount} ‚≠ê
üìù –¢–∏–ø: ${withdrawalInfo.description}
üÜî –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #${withdrawalId}

‚è∞ –ó–∞—è–≤–∫–∞ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤.
–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ.

üíé –û—Å—Ç–∞—Ç–æ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ: ${(user.balance - withdrawalInfo.amount).toFixed(2)} ‚≠ê`);

        } catch (error) {
            console.error('Error requesting withdrawal:', error);
            await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥');
        }
    }

    // Send withdrawal request to admin chat
    async sendToAdminChat(withdrawalId, user, withdrawalInfo) {
        try {
            const userLink = user.username ? 
                `@${user.username}` : 
                `[${user.first_name}](tg://user?id=${user.id})`;

            const message = `üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥!

üÜî –ó–∞—è–≤–∫–∞: #${withdrawalId}
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userLink}
üì± ID: \`${user.id}\`
üí∞ –°—É–º–º–∞: ${withdrawalInfo.amount} ‚≠ê
üìù –¢–∏–ø: ${withdrawalInfo.description}
üìÖ –î–∞—Ç–∞: ${new Date().toLocaleString('ru-RU')}

üë• –†–µ—Ñ–µ—Ä–∞–ª—ã:
‚îú 1 —É—Ä–æ–≤–µ–Ω—å: ${user.level1_referrals}
‚îî 2 —É—Ä–æ–≤–µ–Ω—å: ${user.level2_referrals}

ÔøΩÔøΩÔøΩ –û–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫: ${user.total_earned.toFixed(2)} ‚≠ê`;

            await this.bot.sendMessage(this.adminChatId, message, {
                parse_mode: 'Markdown',
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '‚úÖ –û–¥–æ–±—Ä–∏—Ç—å', callback_data: `admin_withdraw_approve_${withdrawalId}` },
                            { text: '‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å', callback_data: `admin_withdraw_reject_${withdrawalId}` }
                        ]
                    ]
                }
            });

        } catch (error) {
            console.error('Error sending to admin chat:', error);
        }
    }

    // Handle admin callbacks
    async handleAdminCallback(callbackQuery) {
        const msg = callbackQuery.message;
        const data = callbackQuery.data;
        const chatId = msg.chat.id;

        try {
            if (data.startsWith('admin_withdraw_approve_')) {
                const withdrawalId = parseInt(data.split('_')[3]);
                await this.approveWithdrawal(withdrawalId, msg);
            } else if (data.startsWith('admin_withdraw_reject_')) {
                const withdrawalId = parseInt(data.split('_')[3]);
                await this.promptRejectReason(withdrawalId, msg);
            }
        } catch (error) {
            console.error('Error handling admin callback:', error);
        }
    }

    // Approve withdrawal
    async approveWithdrawal(withdrawalId, msg) {
        try {
            const withdrawal = await this.db.get(
                'SELECT w.*, u.username, u.first_name FROM withdrawals w JOIN users u ON w.user_id = u.id WHERE w.id = ?',
                [withdrawalId]
            );

            if (!withdrawal) {
                await this.bot.editMessageText('‚ùå –ó–∞—è–≤–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞', {
                    chat_id: msg.chat.id,
                    message_id: msg.message_id
                });
                return;
            }

            if (withdrawal.status !== 'pending') {
                await this.bot.editMessageText('‚ùå –ó–∞—è–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞', {
                    chat_id: msg.chat.id,
                    message_id: msg.message_id
                });
                return;
            }

            // Update withdrawal status
            await this.db.run(
                'UPDATE withdrawals SET status = "approved", processed_date = CURRENT_TIMESTAMP WHERE id = ?',
                [withdrawalId]
            );

            // Log transaction
            await this.db.run(
                'INSERT INTO transactions (user_id, type, amount, description) VALUES (?, ?, ?, ?)',
                [withdrawal.user_id, 'withdrawal_approved', 0, `–í—ã–≤–æ–¥ –æ–¥–æ–±—Ä–µ–Ω: ${this.withdrawalTypes[withdrawal.withdrawal_type].description}`]
            );

            // Update admin message
            const withdrawalInfo = this.withdrawalTypes[withdrawal.withdrawal_type];
            const userLink = withdrawal.username ? 
                `@${withdrawal.username}` : 
                `[${withdrawal.first_name}](tg://user?id=${withdrawal.user_id})`;

            await this.bot.editMessageText(`‚úÖ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!

üÜî –ó–∞—è–≤–∫–∞: #${withdrawalId}
üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userLink}
üí∞ –°—É–º–º–∞: ${withdrawal.amount} ‚≠ê
üìù –¢–∏–ø: ${withdrawalInfo.description}
‚úÖ –°—Ç–∞—Ç—É—Å: –û–¥–æ–±—Ä–µ–Ω–æ
üìÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${new Date().toLocaleString('ru-RU')}`, {
                chat_id: msg.chat.id,
                message_id: msg.message_id,
                parse_mode: 'Markdown'
            });

            // Notify user
            await this.bot.sendMessage(withdrawal.user_id, `‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ–¥–æ–±—Ä–µ–Ω–∞!

üÜî –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #${withdrawalId}
üí∞ –°—É–º–º–∞: ${withdrawal.amount} ‚≠ê
üìù –¢–∏–ø: ${withdrawalInfo.description}

üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –≤—ã–≤–æ–¥ –±—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`);

        } catch (error) {
            console.error('Error approving withdrawal:', error);
        }
    }

    // Prompt for rejection reason
    async promptRejectReason(withdrawalId, msg) {
        try {
            await this.bot.editMessageText(`‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ #${withdrawalId}

–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è:`, {
                chat_id: msg.chat.id,
                message_id: msg.message_id,
                reply_markup: {
                    force_reply: true,
                    input_field_placeholder: '–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è...'
                }
            });

            // Store withdrawal ID for handling reply
            this.pendingRejections = this.pendingRejections || {};
            this.pendingRejections[msg.chat.id] = withdrawalId;

        } catch (error) {
            console.error('Error prompting reject reason:', error);
        }
    }

    // Reject withdrawal with reason
    async rejectWithdrawal(withdrawalId, reason) {
        try {
            const withdrawal = await this.db.get(
                'SELECT w.*, u.username, u.first_name FROM withdrawals w JOIN users u ON w.user_id = u.id WHERE w.id = ?',
                [withdrawalId]
            );

            if (!withdrawal || withdrawal.status !== 'pending') {
                return false;
            }

            // Return money to user balance
            await this.db.run(
                'UPDATE users SET balance = balance + ? WHERE id = ?',
                [withdrawal.amount, withdrawal.user_id]
            );

            // Update withdrawal status
            await this.db.run(
                'UPDATE withdrawals SET status = "rejected", processed_date = CURRENT_TIMESTAMP, admin_note = ? WHERE id = ?',
                [reason, withdrawalId]
            );

            // Log transaction
            await this.db.run(
                'INSERT INTO transactions (user_id, type, amount, description) VALUES (?, ?, ?, ?)',
                [withdrawal.user_id, 'withdrawal_rejected', withdrawal.amount, `–í—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω—ë–Ω: ${reason}`]
            );

            // Notify user
            const withdrawalInfo = this.withdrawalTypes[withdrawal.withdrawal_type];
            await this.bot.sendMessage(withdrawal.user_id, `‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞

üÜî –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #${withdrawalId}
üí∞ –°—É–º–º–∞: ${withdrawal.amount} ‚≠ê
üìù –¢–∏–ø: ${withdrawalInfo.description}
üìù –ü—Ä–∏—á–∏–Ω–∞: ${reason}

üíé –ó–≤—ë–∑–¥—ã –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å.
–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É.`);

            return true;

        } catch (error) {
            console.error('Error rejecting withdrawal:', error);
            return false;
        }
    }

    // Get withdrawal history for user
    async getWithdrawalHistory(userId, limit = 5) {
        try {
            return await this.db.all(`
                SELECT * FROM withdrawals 
                WHERE user_id = ? 
                ORDER BY request_date DESC 
                LIMIT ?
            `, [userId, limit]);
        } catch (error) {
            console.error('Error getting withdrawal history:', error);
            return [];
        }
    }

    // Get all pending withdrawals (admin function)
    async getPendingWithdrawals() {
        try {
            return await this.db.all(`
                SELECT w.*, u.username, u.first_name 
                FROM withdrawals w 
                JOIN users u ON w.user_id = u.id 
                WHERE w.status = 'pending' 
                ORDER BY w.request_date ASC
            `);
        } catch (error) {
            console.error('Error getting pending withdrawals:', error);
            return [];
        }
    }

    // Get withdrawal statistics
    async getWithdrawalStats() {
        try {
            const stats = await this.db.get(`
                SELECT 
                    COUNT(*) as total_requests,
                    COUNT(CASE WHEN status = 'pending' THEN 1 END) as pending,
                    COUNT(CASE WHEN status = 'approved' THEN 1 END) as approved,
                    COUNT(CASE WHEN status = 'rejected' THEN 1 END) as rejected,
                    COALESCE(SUM(CASE WHEN status = 'approved' THEN amount ELSE 0 END), 0) as total_approved_amount,
                    COALESCE(SUM(CASE WHEN status = 'pending' THEN amount ELSE 0 END), 0) as pending_amount
                FROM withdrawals
            `);

            return stats || {
                total_requests: 0,
                pending: 0,
                approved: 0,
                rejected: 0,
                total_approved_amount: 0,
                pending_amount: 0
            };
        } catch (error) {
            console.error('Error getting withdrawal stats:', error);
            return {
                total_requests: 0,
                pending: 0,
                approved: 0,
                rejected: 0,
                total_approved_amount: 0,
                pending_amount: 0
            };
        }
    }
}

module.exports = WithdrawalController;
