const SafeMessageHelper = require('../utils/safeMessageHelper');

class TaskController {
    constructor(database, bot) {
        this.db = database;
        this.bot = bot;
    }

    // Show available tasks for user
    async showTasks(chatId, userId, messageId = null) {
        try {
            // Get user's next available task
            const nextTask = await this.getNextTask(userId);
            
            if (!nextTask) {
                const noTasksMsg = `üéâ **–í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!**

–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è.
–ù–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –±–ª–∏–∂–∞–π—à–µÔøΩÔøΩ –≤—Ä–µ–º—è.

üí° **–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å:**
‚Ä¢ üëÜ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∫–ª–∏–∫–∏ ‚Äî —Å—Ç–∞–±–∏–ªÔøΩÔøΩ–Ω—ã–π –¥–æ—Ö–æ–¥
‚Ä¢ üë• –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ ‚Äî –ø–∞—Å—Å–∏–≤–Ω—ã–π –¥–æ—Ö–æ–¥
‚Ä¢ üì¶ –ö–µ–π—Å—ã ‚Äî —Å–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–∏–∑—ã
‚Ä¢ üé∞ –õ–æ—Ç–µ—Ä–µ–∏ ‚Äî –∫—Ä—É–ø–Ω—ã–µ –≤—ã–∏–≥—Ä—ã—à–∏

–°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!`;

                const keyboard = [[
                    { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
                ]];

                if (messageId) {
                    await SafeMessageHelper.safeEditMessage(this.bot,noTasksMsg, {
                        chat_id: chatId,
                        message_id: messageId,
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: keyboard
                        }
                    });
                } else {
                    await this.bot.sendMessage(chatId, noTasksMsg, {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: keyboard
                        }
                    });
                }
                return;
            }

            // Show the next task
            await this.showTask(chatId, userId, nextTask, messageId);

        } catch (error) {
            console.error('Error showing tasks:', error);
            const errorMsg = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏–π';
            if (messageId) {
                try {
                    await SafeMessageHelper.safeEditMessage(this.bot,errorMsg, {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: {
                            inline_keyboard: [[
                                { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
                            ]]
                        }
                    });
                } catch (editError) {
                    await this.bot.sendMessage(chatId, errorMsg);
                }
            } else {
                await this.bot.sendMessage(chatId, errorMsg);
            }
        }
    }

    // Get next available task for user
    async getNextTask(userId) {
        try {
            const nextTask = await this.db.get(`
                SELECT t.* FROM tasks t
                WHERE t.is_active = 1 
                AND t.id NOT IN (
                    SELECT task_id FROM user_tasks WHERE user_id = ?
                )
                ORDER BY t.id ASC
                LIMIT 1
            `, [userId]);

            return nextTask;
        } catch (error) {
            console.error('Error getting next task:', error);
            return null;
        }
    }

    // Show specific task
    async showTask(chatId, userId, task, messageId = null) {
        try {
            const taskMessage = `üìã **–ê–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ**

**${task.title}**

üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** ${task.description}
üí∞ **–ù–∞–≥—Ä–∞–¥–∞:** ${task.reward} ‚≠ê

${this.getTaskInstructions(task.type)}`;

            const keyboard = [
                [{ text: '‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', url: task.target_link }],
                [{ text: 'üéÅ –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É', callback_data: `task_claim_${task.id}` }],
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
            ];

            if (messageId) {
                await SafeMessageHelper.safeEditMessage(this.bot,taskMessage, {
                    chat_id: chatId,
                    message_id: messageId,
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: keyboard
                    }
                });
            } else {
                await this.bot.sendMessage(chatId, taskMessage, {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: keyboard
                    }
                });
            }

        } catch (error) {
            console.error('Error showing task:', error);
            const errorMsg = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞–Ω–∏—è';
            if (messageId) {
                try {
                    await SafeMessageHelper.safeEditMessage(this.bot,errorMsg, {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: {
                            inline_keyboard: [[
                                { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
                            ]]
                        }
                    });
                } catch (editError) {
                    await this.bot.sendMessage(chatId, errorMsg);
                }
            } else {
                await this.bot.sendMessage(chatId, errorMsg);
            }
        }
    }

    // Get task instructions based on type
    getTaskInstructions(taskType) {
        switch (taskType) {
            case 'channel':
                return `üì¢ **–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"
2Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –∏ –∏–∑—É—á–∏—Ç–µ –∫–æ–Ω—Ç–µ–Ω—Ç
3Ô∏èÔøΩÔøΩ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç –∏ –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É`;
            case 'chat':
                return `üí¨ **–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"
2Ô∏è‚É£ –í—Å—Ç—É–ø–∏—Ç–µ –≤ —á–∞—Ç –∏ –ø–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–π—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
3Ô∏è‚É£ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç –∏ –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É`;
            case 'bot':
                return `ü§ñ **–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"
2Ô∏è‚É£ –ó–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start
3Ô∏è‚É£ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç –∏ –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É`;
            default:
                return `üìù **–ü–æ—à–∞–≥–æ–≤–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"
2Ô∏è‚É£ –í—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
3Ô∏è‚É£ –í–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ –±–æ—Ç –∏ –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–≥—Ä–∞–¥—É`;
        }
    }

    // Handle task completion callback
    async handleTaskCallback(callbackQuery) {
        const msg = callbackQuery.message;
        const data = callbackQuery.data;
        const chatId = msg.chat.id;
        const userId = callbackQuery.from.id;

        try {
            if (data.startsWith('task_claim_')) {
                const taskId = parseInt(data.split('_')[2]);
                await this.claimTaskReward(chatId, userId, taskId, msg.message_id);
            } else if (data === 'task_next') {
                await this.showTasks(chatId, userId, msg.message_id);
            }
        } catch (error) {
            console.error('Error handling task callback:', error);
            try {
                await SafeMessageHelper.safeEditMessage(this.bot,'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞–Ω–∏—è', {
                    chat_id: chatId,
                    message_id: msg.message_id,
                    reply_markup: {
                        inline_keyboard: [[
                            { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
                        ]]
                    }
                });
            } catch (editError) {
                await this.bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞–Ω–∏—è');
            }
        }
    }

    // Claim task reward
    async claimTaskReward(chatId, userId, taskId, messageId = null) {
        try {
            // Check if task exists and is active
            const task = await this.db.get('SELECT * FROM tasks WHERE id = ? AND is_active = 1', [taskId]);
            if (!task) {
                const errorMsg = '‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ';
                if (messageId) {
                    await SafeMessageHelper.safeEditMessage(this.bot,errorMsg, {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: {
                            inline_keyboard: [[
                                { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
                            ]]
                        }
                    });
                } else {
                    await this.bot.sendMessage(chatId, errorMsg);
                }
                return;
            }

            // Check if user already completed this task
            const completed = await this.db.get(
                'SELECT * FROM user_tasks WHERE user_id = ? AND task_id = ?',
                [userId, taskId]
            );

            if (completed) {
                const errorMsg = '‚ùå –í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ';
                if (messageId) {
                    await SafeMessageHelper.safeEditMessage(this.bot,errorMsg, {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: {
                            inline_keyboard: [[
                                { text: 'üìã –î—Ä—É–≥–∏–µ –∑–∞–¥–∞–Ω–∏—è', callback_data: 'menu_tasks' },
                                { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
                            ]]
                        }
                    });
                } else {
                    await this.bot.sendMessage(chatId, errorMsg);
                }
                return;
            }

            // Verify subscription for the task
            if (await this.verifyTaskCompletion(userId, task)) {
                // Task completed successfully
            } else {
                const notCompletedMsg = `‚ùå **–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ**

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã:
‚Ä¢ –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª/—á–∞—Ç
‚Ä¢ –ó–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞ (–¥–ª—è –∑–∞–¥–∞–Ω–∏–π —Å –±–æ—Ç–∞–º–∏)

–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.`;

                const keyboard = [
                    [{ text: '‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ', url: task.target_link }],
                    [{ text: 'üéÅ –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É', callback_data: `task_claim_${task.id}` }],
                    [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
                ];

                if (messageId) {
                    await SafeMessageHelper.safeEditMessage(this.bot,notCompletedMsg, {
                        chat_id: chatId,
                        message_id: messageId,
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: keyboard
                        }
                    });
                } else {
                    await this.bot.sendMessage(chatId, notCompletedMsg, {
                        parse_mode: 'Markdown',
                        reply_markup: {
                            inline_keyboard: keyboard
                        }
                    });
                }
                return;
            }
            
            // Mark task as completed
            await this.db.run(
                'INSERT INTO user_tasks (user_id, task_id) VALUES (?, ?)',
                [userId, taskId]
            );

            // Calculate boost from pets (task boost pets)
            const taskPets = await this.db.all(`
                SELECT p.boost_multiplier, up.level
                FROM user_pets up
                JOIN pets p ON up.pet_id = p.id
                WHERE up.user_id = ? AND p.boost_type = 'task'
            `, [userId]);

            let taskBoost = 0;
            taskPets.forEach(pet => {
                taskBoost += pet.boost_multiplier * pet.level;
            });

            // Final reward with boost
            const finalReward = task.reward + taskBoost;

            // Add reward to user balance
            await this.db.run(
                'UPDATE users SET balance = balance + ?, total_earned = total_earned + ? WHERE id = ?',
                [finalReward, finalReward, userId]
            );

            // Log transaction
            const transactionDesc = taskBoost > 0
                ? `–ó–∞–¥ÔøΩÔøΩ–Ω–∏–µ: ${task.title} (+${taskBoost} –±—É—Å—Ç)`
                : `–ó–∞–¥–∞–Ω–∏–µ: ${task.title}`;

            await this.db.run(
                'INSERT INTO transactions (user_id, type, amount, description) VALUES (?, ?, ?, ?)',
                [userId, 'task', finalReward, transactionDesc]
            );

            // Get updated user balance
            const updatedUser = await this.db.get('SELECT balance FROM users WHERE id = ?', [userId]);

            const boostInfo = taskBoost > 0 ? ` (–±–∞–∑–æ–≤–∞—è ${task.reward} + –±—É—Å—Ç +${taskBoost} –æ—Ç –ø–∏—Ç–æ–º—ÜÔøΩÔøΩ–≤)` : '';

            const successMsg = `‚úÖ **–ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!**

üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ.

üìã **–ó–∞–¥–∞–Ω–∏–µ:** ${task.title}
üí∞ **–ü–æ–ª—É—á–µ–Ω–æ:** ${finalReward.toFixed(2)} ‚≠ê${boostInfo}
üíé **–í–∞—à –±–∞–ª–∞–Ω—Å:** ${updatedUser.balance.toFixed(2)} ‚≠ê

–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞!`;

            const keyboard = [
                [{ text: 'üìã –°–ª–µ–¥—É—é—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ', callback_data: 'task_next' }],
                [{ text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }]
            ];

            if (messageId) {
                await SafeMessageHelper.safeEditMessage(this.bot,successMsg, {
                    chat_id: chatId,
                    message_id: messageId,
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: keyboard
                    }
                });
            } else {
                await this.bot.sendMessage(chatId, successMsg, {
                    parse_mode: 'Markdown',
                    reply_markup: {
                        inline_keyboard: keyboard
                    }
                });
            }

        } catch (error) {
            console.error('Error claiming task reward:', error);
            const errorMsg = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –Ω–∞–≥—Ä–∞–¥—ã';
            if (messageId) {
                try {
                    await SafeMessageHelper.safeEditMessage(this.bot,errorMsg, {
                        chat_id: chatId,
                        message_id: messageId,
                        reply_markup: {
                            inline_keyboard: [[
                                { text: 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data: 'main_menu' }
                            ]]
                        }
                    });
                } catch (editError) {
                    await this.bot.sendMessage(chatId, errorMsg);
                }
            } else {
                await this.bot.sendMessage(chatId, errorMsg);
            }
        }
    }

    // Verify task completion (check if user subscribed to required channel/chat)
    async verifyTaskCompletion(userId, task) {
        try {
            if (task.type === 'channel' || task.type === 'chat') {
                // Try to extract channel ID or username from various link formats
                let channelIdentifier = null;

                // Handle different Telegram link formats
                const link = task.target_link;

                // Format 1: t.me/username
                let match = link.match(/t\.me\/([a-zA-Z0-9_]+)$/);
                if (match && !match[1].startsWith('+')) {
                    channelIdentifier = `@${match[1]}`;
                }

                // Format 2: t.me/+hash (private channels)
                if (!channelIdentifier) {
                    match = link.match(/t\.me\/\+([a-zA-Z0-9_-]+)/);
                    if (match) {
                        // Private channels cannot be verified through username
                        console.log('Private channel detected, assuming completed');
                        return true;
                    }
                }

                // Format 3: t.me/joinchat/hash (old format)
                if (!channelIdentifier) {
                    match = link.match(/t\.me\/joinchat\/([a-zA-Z0-9_-]+)/);
                    if (match) {
                        // Old invite links cannot be verified through username
                        console.log('Old invite link detected, assuming completed');
                        return true;
                    }
                }

                // Format 4: Extract from query parameters
                if (!channelIdentifier) {
                    match = link.match(/[?&]invite=([a-zA-Z0-9_-]+)/);
                    if (match) {
                        console.log('Invite parameter detected, assuming completed');
                        return true;
                    }
                }

                // If we have a channel identifier, try to verify subscription
                if (channelIdentifier) {
                    try {
                        const member = await this.bot.getChatMember(channelIdentifier, userId);
                        const isSubscribed = member.status !== 'left' && member.status !== 'kicked';
                        console.log(`Subscription check for ${channelIdentifier}: ${isSubscribed ? 'subscribed' : 'not subscribed'}`);
                        return isSubscribed;
                    } catch (error) {
                        console.error(`Error checking subscription to ${channelIdentifier}:`, error.message);
                        // If channel is private or we can't access it, assume completed
                        if (error.message.includes('chat not found') ||
                            error.message.includes('not enough rights') ||
                            error.message.includes('Forbidden') ||
                            error.message.includes('member list is inaccessible')) {
                            console.log('Channel verification failed (private/restricted), assuming completed');
                            return true;
                        }
                        return false;
                    }
                } else {
                    console.log('Could not extract channel identifier from link, assuming completed');
                    return true;
                }
            }

            // For bot type tasks, cannot verify, assume completed
            if (task.type === 'bot') {
                console.log('Bot task type, cannot verify, assuming completed');
                return true;
            }

            // For other task types, assume completed
            return true;
        } catch (error) {
            console.error('Error verifying task completion:', error);
            return true;
        }
    }
}

module.exports = TaskController;
